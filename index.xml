<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dev.jinyongp</title><link>https://jinyongp.dev/</link><description>Recent content on dev.jinyongp</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Apr 2022 02:47:11 +0000</lastBuildDate><atom:link href="https://jinyongp.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>d3-selection : Data Driven Transformation of DOM</title><link>https://jinyongp.dev/blog/d3-selection-data-driven-transformation-dom/</link><pubDate>Sat, 16 Apr 2022 02:47:11 +0000</pubDate><guid>https://jinyongp.dev/blog/d3-selection-data-driven-transformation-dom/</guid><description>이전 시리즈: d3-force : Simulating Physical Forces 다음 시리즈: d3-zoom, d3-drag : Panning and Zooming and Dragging d3-selection 살펴보기 d3-selection은 데이터를 기반으로 DOM을 조작할 수 있는 다양한 기능을 제공합니다.
이번 시리즈는 d3-force와 연계하여 Github Follower, Following 관계망 그리기를 목표로 하고 있으므로 구현 과정에서 필요한 부분에 대해서만 다루도록 하겠습니다.
들어가기 전에 Selection 객체에 대해 알아봅시다. d3-selection으로 선택한 요소는 groups와 parents property를 갖는 Selection 객체를 생성합니다. Selection 객체는 선택한 요소를 제어할 수 있는 다양한 메서드를 제공합니다.</description></item><item><title>D3.js Github Follow 관계망</title><link>https://jinyongp.dev/projects/d3-js-github-follow-%EA%B4%80%EA%B3%84%EB%A7%9D/</link><pubDate>Thu, 14 Apr 2022 14:31:09 +0000</pubDate><guid>https://jinyongp.dev/projects/d3-js-github-follow-%EA%B4%80%EA%B3%84%EB%A7%9D/</guid><description>진행 이유 이전에 진행한 D3.js를 이용한 Github Starred Repo 관계망 그리기 프로젝트에서 d3.js에 큰 흥미를 느끼게 되었습니다. 처음 다뤄보는 라이브러리라 기능 하나를 추가할 때마다 많은 자료와 문서를 찾아봐야 했습니다. 어찌어찌하긴 했지만 약간 아쉬움이 남아있습니다. 아무래도 깔끔하게 이해하는데 어려움이 있었고, 그 어려움을 극복하고자 직접 정리하여 작성해보고자 합니다.
사용하려는 라이브러리는 d3.js 뿐입니다. 자세히는 d3-force, d3-zoom, d3-selection, d3-drag 등을 활용할 예정이고 기회가 된다면 성능 향상을 위해 Canvas API로 구현해보려고 합니다.
시리즈 d3-force : Simulating Physical Forces d3-selection : Data Driven Transformation of DOM d3-zoom, d3-drag : Panning and Zooming and Dragging</description></item><item><title>d3-force : Simulating Physical Forces</title><link>https://jinyongp.dev/blog/d3-force-simulating-physical-forces/</link><pubDate>Thu, 14 Apr 2022 14:20:46 +0000</pubDate><guid>https://jinyongp.dev/blog/d3-force-simulating-physical-forces/</guid><description>다음 시리즈: d3-selection : Data Driven Transformation of DOM d3-force 살펴보기 d3-force는 입자(nodes) 간에 가해지는 물리적 힘(forces)을 simulation하여 입자의 좌표값을 계산하고 제공합니다.
그럼 코드와 함께 Simulation과 Forces에 대해 이해해봅시다.
Simulation Simulation은 nodes에 가해지는 물리적 힘을 계산합니다. d3.forceSimulation() 함수로 simulation을 생성합니다.
const simulation = d3.forceSimulation(); Simulation에 그래프의 정점 목록인 nodes와 간선 목록인 links를 등록할 수 있습니다.
Nodes 먼저 nodes에 대해 알아봅시다. Simulation은 입력한 node 객체에 계산 결과값을 추가합니다.</description></item><item><title>2022년</title><link>https://jinyongp.dev/study/2022%EB%85%84/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://jinyongp.dev/study/2022%EB%85%84/</guid><description>4월 21일 d3-selection 포스팅 작성 완료 블로그 SEO 작업 (Google Analytics, Naver Webmaster) d3-drag, d3-zoom 학습 (D3 Force, Zoom, Drag (w/ SVG) - codepen.io) 인터렉티브 디벨로퍼인 김종민 씨가 여태까지 어떤 길을 걸어오신건지 궁금해졌다. 그래서 김종민 씨가 지금의 위치까지 어떻게 오게 되었는지에 대해 직접 집필하신 &amp;ldquo;일은 배신하지 않는다&amp;rdquo; 책을 구입했다. 이 책에 내가 찾는 정답이 있었으면 좋겠다&amp;hellip; 4월 20일 Carrot Market #8.5까지 시청 Prisma와 PlanetScale으로 MySQL 기반 Serverless를 구축했다.</description></item></channel></rss>