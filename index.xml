<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dev.jinyongp</title><link>https://jinyongp.github.io/</link><description>Recent content on dev.jinyongp</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Apr 2022 02:47:11 +0000</lastBuildDate><atom:link href="https://jinyongp.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>d3-selection : DOM을 데이터로 조작하기</title><link>https://jinyongp.github.io/blog/d3-selection-dom%EC%9D%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EC%A1%B0%EC%9E%91%ED%95%98%EA%B8%B0/</link><pubDate>Sat, 16 Apr 2022 02:47:11 +0000</pubDate><guid>https://jinyongp.github.io/blog/d3-selection-dom%EC%9D%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EC%A1%B0%EC%9E%91%ED%95%98%EA%B8%B0/</guid><description>이전 시리즈: d3-force : Simulation, Forces 살펴보기
d3-selection 살펴보기 d3-selection은 데이터를 기반으로 DOM을 조작할 수 있는 다양한 기능을 제공합니다.
이번 시리즈는 d3-force와 연계하여 Github Follower, Following 관계망 그리기를 목표로 하고 있으므로 구현 과정에서 필요한 부분에 대해서만 다루도록 하겠습니다.
들어가기 전에 Selection 객체에 대해 알아봅시다. d3-selection으로 선택한 요소는 groups와 parents property를 갖는 Selection 객체를 생성합니다. Selection 객체는 선택한 요소를 제어할 수 있는 다양한 메서드를 제공합니다.
요소 선택: selection, select, selectAll, selectChild, selectChildren, filter, merge 요소 변경: attr, classed, style, property, text, html, append, insert, remove, clone, sort, order, raise, lower 데이터 연결: data, join, enter, exit, datum 이벤트 핸들링: on, dispatch 제어 흐름: each, call, empty, nodes, size, [Symbol.</description></item><item><title>D3.js Github Follow 관계망</title><link>https://jinyongp.github.io/projects/d3-js-github-follow-%EA%B4%80%EA%B3%84%EB%A7%9D/</link><pubDate>Thu, 14 Apr 2022 14:31:09 +0000</pubDate><guid>https://jinyongp.github.io/projects/d3-js-github-follow-%EA%B4%80%EA%B3%84%EB%A7%9D/</guid><description>진행 이유? 이전에 진행한 D3.js를 이용한 Github Starred Repo 관계망 그리기 프로젝트에서 d3.js에 큰 흥미를 느끼게 되었습니다. 처음 다뤄보는 라이브러리라 기능 하나를 추가할 때마다 많은 자료와 문서를 찾아봐야 했습니다. 어찌어찌하긴 했지만 약간 아쉬움이 남아있습니다. 아무래도 깔끔하게 이해하는데 어려움이 있었고, 그 어려움을 극복하고자 직접 정리하여 작성해보고자 합니다.
사용하려는 라이브러리는 d3.js 뿐입니다. 자세히는 d3-force, d3-zoom, d3-selection, d3-drag 등을 활용할 예정이고 기회가 된다면 SVG 대신 Canvas API로 구현해보려고 합니다.
시리즈 d3-force : Simulation, Forces 살펴보기</description></item><item><title>d3-force : Simulation, Forces 살펴보기</title><link>https://jinyongp.github.io/blog/d3-force-simulation-forces-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0/</link><pubDate>Thu, 14 Apr 2022 14:20:46 +0000</pubDate><guid>https://jinyongp.github.io/blog/d3-force-simulation-forces-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0/</guid><description>다음 시리즈: d3-selection : DOM을 데이터로 조작하기
d3-force 살펴보기 d3-force는 입자(nodes) 간에 가해지는 물리적 힘(forces)을 simulation하여 입자의 좌표값을 계산하고 제공합니다.
그럼 코드와 함께 Simulation과 Forces에 대해 이해해봅시다.
Simulation Simulation은 nodes에 가해지는 물리적 힘을 계산합니다. d3.forceSimulation() 함수로 simulation을 생성합니다.
const simulation = d3.forceSimulation(); Simulation에 그래프의 정점 목록인 nodes와 간선 목록인 links를 등록할 수 있습니다.
Nodes 먼저 nodes에 대해 알아봅시다. Simulation은 입력한 node 객체에 계산 결과값을 추가합니다. nodes 배열에서 각 node를 인덱스로 관리해도 되지만, 보기 어려우므로 고유 식별자 id를 추가하겠습니다.</description></item><item><title>2022년</title><link>https://jinyongp.github.io/study/2022%EB%85%84/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://jinyongp.github.io/study/2022%EB%85%84/</guid><description>4월 20일 Carrot Market #8.5까지 시청 Prisma와 PlanetScale으로 MySQL 기반 Serverless를 구축했다. (이 사이트도 Tailwind로 작성되어 있다&amp;hellip;) PlanetScale은 확장성을 위해 foreign key를 지원하지 않으므로 외부키를 검사하지 않는다. Prisma의 Referential Integrity 기능을 활용해 존재 여부를 확인하여 에러 가능성을 줄여야 한다. React Hook Form 라이브러리로 유효성 검증을 빠르고 쉽게 진행한다. Codepen에서 d3-force를 canvas로 구현해보았는데 몇 가지 부딪힌 문제가 있다. 해결 방법을 찾아보는 중이다. drag, zoom 둘이 동시에 적용되지 않는다.</description></item></channel></rss>