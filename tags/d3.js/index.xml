<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>d3.js on jinyongp.dev</title><link>https://jinyongp.dev/tags/d3.js/</link><description>Recent content in d3.js on jinyongp.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 22 Apr 2022 14:18:15 +0000</lastBuildDate><atom:link href="https://jinyongp.dev/tags/d3.js/index.xml" rel="self" type="application/rss+xml"/><item><title>D3.js and Canvas API : 성능 향상을 위한 Refactoring</title><link>https://jinyongp.dev/blog/d3-js-canvas-api-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-refactoring/</link><pubDate>Fri, 22 Apr 2022 14:18:15 +0000</pubDate><guid>https://jinyongp.dev/blog/d3-js-canvas-api-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-refactoring/</guid><description>이전 시리즈: d3-zoom, d3-drag : Panning and Zooming and Dragging Introduction 저번 시리즈에서 필요한 기능은 전부 구현해보았지만, svg 요소의 개수가 증가할수록 성능이 하락하는 모습을 확인했습니다. 50개의 nodes에 대해 DevTools로 측정해본 결과, 렌더링 연산에 굉장히 많은 CPU, GPU 작업을 필요로 하고 있었습니다.
이를 해결하기 위해서 Canvas API를 이용할 수 있습니다. Canvas API를 이용하면 d3-selection을 다룰 일은 거의 없습니다. 특히나 이번처럼 단순히 원과 선만 그리면 되는 작업에서는 그리기 더욱 쉽습니다. 대신 zoom과 drag는 구현 방식에 차이가 있어 다소 어려운 점도 있습니다.</description></item><item><title>d3-zoom, drag : Panning, Zooming and Dragging</title><link>https://jinyongp.dev/blog/d3-zoom-d3-drag-panning-zooming-dragging/</link><pubDate>Thu, 21 Apr 2022 11:16:27 +0000</pubDate><guid>https://jinyongp.dev/blog/d3-zoom-d3-drag-panning-zooming-dragging/</guid><description>이전 시리즈: d3-selection : Data Driven Transformation of DOM 다음 시리즈: D3.js and Canvas API : 성능 향상을 위한 Refactoring Introduction d3-zoom과 d3-drag는 사용자가 마우스 클릭 혹은 터치로 화면을 제어하거나 요소를 이동하는 기능을 제공합니다.
이번 시리즈 또한 마찬가지로 저번 시리즈에 구현했던 코드에 d3-zoom과 d3-drag를 결합하는 걸 목표로 하여 그에 필요한 부분만 다루도록 하겠습니다.
d3-zoom d3-zoom은 사용자가 화면을 드래그 혹은 스크롤하여 현재 보는 범위를 이동, 확대, 축소하는 기능을 제공합니다. 혹은, 특정 요소를 선택했을 때 그 위치로 이동하면서 포커스하는 효과를 줄 수도 있습니다.</description></item><item><title>d3-selection : Data Driven Transformation of DOM</title><link>https://jinyongp.dev/blog/d3-selection-data-driven-transformation-dom/</link><pubDate>Sat, 16 Apr 2022 02:47:11 +0000</pubDate><guid>https://jinyongp.dev/blog/d3-selection-data-driven-transformation-dom/</guid><description>이전 시리즈: d3-force : Simulating Physical Forces 다음 시리즈: d3-zoom, d3-drag : Panning and Zooming and Dragging Introduction d3-selection은 데이터를 기반으로 DOM을 조작할 수 있는 다양한 기능을 제공합니다.
이번 시리즈는 d3-force와 연계하여 Github Follower, Following 관계망 그리기를 목표로 하고 있으므로 구현 과정에서 필요한 부분에 대해서만 다루도록 하겠습니다.
들어가기 전에 Selection 객체에 대해 알아봅시다. d3-selection으로 선택한 요소는 groups와 parents property를 갖는 Selection 객체를 생성합니다. Selection 객체는 선택한 요소를 제어할 수 있는 다양한 메서드를 제공합니다.</description></item><item><title>D3.js Github Follow Network</title><link>https://jinyongp.dev/projects/d3-js-github-follow-network/</link><pubDate>Thu, 14 Apr 2022 14:31:09 +0000</pubDate><guid>https://jinyongp.dev/projects/d3-js-github-follow-network/</guid><description>이전에 진행한 D3.js를 이용한 Github Starred Repo 관계망 그리기 프로젝트에서 d3.js에 큰 흥미를 느끼게 되었습니다. 처음 다뤄보는 라이브러리라 기능 하나를 추가할 때마다 많은 자료와 문서를 찾아봐야 했습니다. 어찌어찌하긴 했지만 약간 아쉬움이 남아있습니다. 아무래도 깔끔하게 이해하는데 어려움이 있었고, 그 어려움을 극복하고자 직접 정리하여 작성해보고자 합니다.
사용하는 라이브러리는 d3.js입니다. 자세히는 d3-force, d3-zoom, d3-selection, d3-drag 등 필요한 모듈이라면 전부 활용해볼 예정이고 성능 향상을 위해 Canvas API로 구현해보려고 합니다.
Series d3-force : Simulating Physical Forces d3-selection : Data Driven Transformation of DOM d3-zoom, d3-drag : Panning and Zooming and Dragging D3.</description></item><item><title>d3-force : Simulating Physical Forces</title><link>https://jinyongp.dev/blog/d3-force-simulating-physical-forces/</link><pubDate>Thu, 14 Apr 2022 14:20:46 +0000</pubDate><guid>https://jinyongp.dev/blog/d3-force-simulating-physical-forces/</guid><description>다음 시리즈: d3-selection : Data Driven Transformation of DOM Introduction d3-force는 입자(nodes) 간에 가해지는 물리적 힘(forces)을 simulation하여 입자의 좌표값을 계산하고 제공합니다.
코드와 함께 Simulation과 Forces에 대해 이해해봅시다.
Simulation Simulation은 nodes에 가해지는 물리적 힘을 계산합니다. d3.forceSimulation() 함수로 simulation을 생성합니다.
const simulation = d3.forceSimulation(); Simulation에 그래프의 정점 목록인 nodes와 간선 목록인 links를 등록할 수 있습니다.
Nodes 먼저 nodes에 대해 알아봅시다. Simulation은 입력한 node 객체에 계산 결과값을 추가합니다. nodes 배열에서 각 node를 인덱스로 관리해도 되지만, 보기 어려우므로 고유 식별자 id를 추가하겠습니다.</description></item></channel></rss>