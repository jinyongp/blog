<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>d3.js on dev.jinyongp</title><link>https://jinyongp.github.io/tags/d3.js/</link><description>Recent content in d3.js on dev.jinyongp</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Apr 2022 14:31:09 +0000</lastBuildDate><atom:link href="https://jinyongp.github.io/tags/d3.js/index.xml" rel="self" type="application/rss+xml"/><item><title>D3.js Github Follow 관계망</title><link>https://jinyongp.github.io/projects/d3-js-github-follow-%EA%B4%80%EA%B3%84%EB%A7%9D/</link><pubDate>Thu, 14 Apr 2022 14:31:09 +0000</pubDate><guid>https://jinyongp.github.io/projects/d3-js-github-follow-%EA%B4%80%EA%B3%84%EB%A7%9D/</guid><description>진행 이유? 이전에 진행한 D3.js를 이용한 Github Starred Repo 관계망 그리기 프로젝트에서 d3.js에 큰 흥미를 느끼게 되었습니다. 처음 다뤄보는 라이브러리라 기능 하나를 추가할 때마다 많은 자료와 문서를 찾아봐야 했습니다. 어찌어찌하긴 했지만 약간 아쉬움이 남아있습니다. 아무래도 깔끔하게 이해하는데 어려움이 있었고, 그 어려움을 극복하고자 직접 정리하여 작성해보고자 합니다.
사용하려는 라이브러리는 d3.js 뿐입니다. 자세히는 d3-force, d3-zoom, d3-selection, d3-drag 등을 활용할 예정이고 기회가 된다면 SVG 대신 Canvas API로 구현해보려고 합니다.
시리즈 d3-force : Simulation, Forces 살펴보기</description></item><item><title>d3-force : Simulation, Forces 살펴보기</title><link>https://jinyongp.github.io/blog/d3-force-simulation-forces-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0/</link><pubDate>Thu, 14 Apr 2022 14:20:46 +0000</pubDate><guid>https://jinyongp.github.io/blog/d3-force-simulation-forces-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0/</guid><description>d3-force 살펴보기 d3-force는 입자(nodes) 간에 가해지는 물리적 힘(forces)을 simulation하여 입자의 좌표값을 계산하고 제공합니다.
그럼 코드와 함께 Simulation과 Forces에 대해 이해해봅시다.
Simulation Simulation은 nodes에 가해지는 물리적 힘을 계산합니다. d3.forceSimulation() 함수로 simulation을 생성합니다.
const simulation = d3.forceSimulation(); Simulation에 그래프의 정점 목록인 nodes와 간선 목록인 links를 등록할 수 있습니다.
Nodes 먼저 nodes에 대해 알아봅시다. Simulation은 입력한 node 객체에 계산 결과값을 추가합니다. nodes 배열에서 각 node를 인덱스로 관리해도 되지만, 보기 어려우므로 고유 식별자 id를 추가하겠습니다.</description></item></channel></rss>