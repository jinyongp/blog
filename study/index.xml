<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Study on jinyongp.dev</title><link>https://jinyongp.dev/study/</link><description>Recent content in Study on jinyongp.dev</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 19 Jul 2023 04:26:26 +0000</lastBuildDate><atom:link href="https://jinyongp.dev/study/index.xml" rel="self" type="application/rss+xml"/><item><title>[내배캠] Swift 기초 개인 과제</title><link>https://jinyongp.dev/study/nbcamp/3/</link><pubDate>Wed, 19 Jul 2023 04:26:26 +0000</pubDate><guid>https://jinyongp.dev/study/nbcamp/3/</guid><description>본 캠프가 시작되고 2주차가 되었습니다.
이번 주차에선 Swift를 학습하고 간단한 연산 기능을 제공하는 계산기를 만들어 보는 과제를 수행했습니다.
캠프에서는 자기주도적 학습 방식을 추구하기 때문에 주어지는 학습 자료 외에도 스스로 조사하고 학습해야 합니다. 주어지는 학습자료만으로는 깊게 학습할 수 없었기에 공식 문서와 다른 강의를 병행하며 부족한 부분을 채워야 합니다.
저는 캠프 참여 이전에 이러한 부분을 인지하고 있었으므로 자세한 문법이나 이론 관련한 내용은 앨런 Swift 문법 마스터 스쿨 과정을 병행하며 보충했습니다.
과제를 수행하기에 충분한 문법과 이론을 학습했고, 이를 기반으로 CLI에서 실행할 수 있는 간단한 계산기 툴을 작성했습니다.</description></item><item><title>[내배캠] 첫번째 팀 프로젝트</title><link>https://jinyongp.dev/study/nbcamp/2/</link><pubDate>Wed, 19 Jul 2023 01:27:06 +0000</pubDate><guid>https://jinyongp.dev/study/nbcamp/2/</guid><description>사전캠프에서 학습한 Flutter를 활용하여 첫번째 팀 프로젝트를 진행했습니다.
4일간 진행한 프로젝트로 목적은 앱 개발 전반의 과정을 익히기 위함이지만, 보다 팀원분들과의 소통과 협업 관점에 비중으로 두고 프로젝트를 진행하였습니다.
프로젝트의 주제는 팀과 팀원의 소개를 담은 앱을 작성하는 것으로, 각자 자신의 소개를 담은 상세 페이지를 작성하고 합치기로 결정하였습니다. 저는 상세 페이지와 더불어 메인 페이지와 각 상세 페이지에서 쓰일 댓글 관리 서비스를 맡았습니다.
그 중에서도 댓글 관리 서비스를 어떻게 구현했는지 정리해보고자 합니다.
프로젝트 저장소</description></item><item><title>[내배캠] 사전캠프</title><link>https://jinyongp.dev/study/nbcamp/1/</link><pubDate>Tue, 27 Jun 2023 11:16:56 +0000</pubDate><guid>https://jinyongp.dev/study/nbcamp/1/</guid><description>2023년 06월 30일 5주차 강의는 HTTP API 요청 방법을 익혔습니다. 다음주는 광고 붙이는건데&amp;hellip; 이번이 마지막일 듯 하네요.
Requesting Network Data HttpClient로는 dio 패키지를 활용했습니다. 책 정보를 불러올 수 있는 Google API를 활용하여 Watcha Pedia 서비스를 구현했습니다.
// main.dart void main() async { late SharedPreferences pref; if (!kIsWeb) { WidgetsFlutterBinding.ensureInitialized(); pref = await SharedPreferences.getInstance(); } runApp(MultiProvider( providers: [ ChangeNotifierProvider( create: (_) =&amp;gt; BookService( get: &amp;lt;T&amp;gt;(String query) async { String url = &amp;#39;https://www.</description></item></channel></rss>