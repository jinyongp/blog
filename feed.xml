<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jinyongp.dev</title><link>https://jinyongp.dev/</link><description>Recent content on jinyongp.dev</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>dev.jinyongp@gmail.com (Jinyong Park)</managingEditor><webMaster>dev.jinyongp@gmail.com (Jinyong Park)</webMaster><copyright>Copyright 2023. Jinyong Park. All rights reserved.</copyright><lastBuildDate>Wed, Aug 09 09:45:38 2023 +0000</lastBuildDate><atom:link href="https://jinyongp.dev/feed.xml" rel="self" type="application/rss+xml"/><item><title>Learning Software Design Pattern (Swift)</title><link>https://jinyongp.dev/series/design-pattern/1/</link><pubDate>Wed, Aug 09 09:45:38 2023 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/series/design-pattern/1/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>소프트웨어 디자인 패턴은 소프트웨어 개발 과정에서 자주 발생하고 직면하는 문제에 대한 해결책입니다. 반복적으로 마주하는 문제에 대한 해결책을 청사진처럼 만들어두고 필요할 때마다 재사용할 수 있습니다.&lt;/p>
&lt;p>각 디자인 패턴마다 어떤 문제를 마주했을 때 적용할 법한 패턴인지 알아보고 Swift 언어를 활용하여 어떻게 구현할 수 있는지 알아보았습니다. 그러므로 Swift의 문법이 포함되어 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ 디자인 패턴을 갓 배운 많은 개발자는 문제를 더 간단히 해결할 수 있는 상황임에도 모든 곳에 패턴을 적용해보려는 실수를 범한다고 합니다. 문제를 해결하는데 더 간단한 방법이 있다면 굳이 디자인 패턴을 적용할 필요가 없습니다.&lt;/p>
&lt;/blockquote>
&lt;p>본 시리즈는 &lt;a
class="underline-lsre"
href="https://product.kyobobook.co.kr/detail/S000200311846"
target="_blank" rel="noopener noreferrer nofollow"
>Java 언어로 배우는 디자인 패턴 입문&lt;/a
>
을 참고하여 작성했습니다. 본 서적에선 GoF의 23가지 디자인 패턴을 다루고 있습니다. 하지만 GoF의 분류 체계(생성, 구조, 행위)를 따르지 않고, 다른 관점으로 분류하고 있으므로 이를 따라서 작성했습니다.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://refactoring.guru/ko/design-patterns"
target="_blank" rel="noopener noreferrer nofollow"
>Design pattern - Refactoring Guru&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://product.kyobobook.co.kr/detail/S000200311846"
target="_blank" rel="noopener noreferrer nofollow"
>Java 언어로 배우는 디자인 패턴 입문 : 쉽게 배우는 GoF의 23가지 디자인 패턴&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://refactoring.guru/ko/design-patterns/swift"
target="_blank" rel="noopener noreferrer nofollow"
>Design Pattern in Swift&lt;/a
>
&lt;/li>
&lt;/ul></description></item><item><title>Iterator Pattern in Swift</title><link>https://jinyongp.dev/posts/design-pattern/1/</link><pubDate>Wed, Aug 09 06:35:34 2023 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/posts/design-pattern/1/</guid><description>&lt;h2 id="why-to-use">Why to Use&lt;/h2>
&lt;p>Iterator Pattern은 순회 로직을 순회자(Iterator) 객체로 분리합니다. 이러한 추상화 작업을 통해 순회 불가능한 객체더라도 인터페이스만 구현한다면 순회 가능한 객체로 만들 수 있습니다.&lt;/p>
&lt;p>예를 들어, 자료구조 중 배열은 메모리 구조의 특징 덕분에 0..&amp;lt;배열크기 범위로 인덱스를 증가시키며 요소에 접근할 수 있습니다. 허나 리스트의 경우엔 순회 로직을 직접 구현하지 않는 한 인덱스를 이용한 순회가 불가능합니다. 리스트 클래스를 순회 가능한 객체로 만들기 위해선 별도의 구현을 추가해야 합니다. 여기서 Iterator Pattern을 적용한다면 리스트 클래스의 세부 구현을 변경하지 않고도 순회 가능한 객체로 확장할 수 있습니다.&lt;/p>
&lt;p>Iterator Pattern을 구현하기 위해 필요한 객체는 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>Iterator(반복자): 순회 로직을 추상화한 인터페이스입니다. 다음 요소를 반환하는 &lt;code>next()&lt;/code> 메서드와 현재 요소가 마지막 요소인지 확인하는 &lt;code>hasNext()&lt;/code> 메서드를 포함합니다.&lt;/li>
&lt;li>ConcreteIterator(구체적인 반복자): Iterator 인터페이스를 구현한 객체입니다.&lt;/li>
&lt;li>Aggregate(집합체): 순회 가능한 객체임을 나타내는 인터페이스입니다. ConcreteIterator 객체를 생성하여 반환하는 &lt;code>makeIterator()&lt;/code> 메서드를 포함하기도 합니다. (aka. Iterable)&lt;/li>
&lt;li>ConcreteAggregate(구체적인 집합체): Aggregate 인터페이스를 구현한 객체입니다.&lt;/li>
&lt;/ul>
&lt;p>&lt;a
class="underline-lsre"
href="https://product.kyobobook.co.kr/detail/S000200311846"
target="_blank" rel="noopener noreferrer nofollow"
>Java 언어로 배우는 디자인 패턴 입문&lt;/a
>
의 Iterator Pattern 예제를 Swift로 작성해보았습니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">protocol Iterable&amp;lt;Element&amp;gt; {
associatedtype Element where Element == Iter.Element
associatedtype Iter: Iterator
func makeIterator() -&amp;gt; Iter;
}
protocol Iterator&amp;lt;Element&amp;gt; {
associatedtype Element
mutating func next() -&amp;gt; Element?
}
struct Book {
private(set) var name: String
}
struct BookShelf {
private var books: [Book] = []
var count: Int { books.count }
func book(at index: Int) -&amp;gt; Book {
return books[index]
}
mutating func add(book: Book) {
books.append(book)
}
}
extension BookShelf: Iterable {
typealias Element = Book
typealias Iter = BookShelfIterator
func makeIterator() -&amp;gt; Iter {
return BookShelfIterator(self)
}
}
struct BookShelfIterator: Iterator {
typealias Element = Book
private let bookShelf: BookShelf
private var index: Int
init(_ bookShelf: BookShelf) {
self.bookShelf = bookShelf
index = 0
}
mutating func next() -&amp;gt; Element? {
if bookShelf.count &amp;gt; index {
defer { index += 1 }
return bookShelf.book(at: index)
}
return nil
}
}
var bookShelf = BookShelf()
bookShelf.add(book: Book(name: &amp;quot;Book1&amp;quot;))
bookShelf.add(book: Book(name: &amp;quot;Book2&amp;quot;))
bookShelf.add(book: Book(name: &amp;quot;Book3&amp;quot;))
bookShelf.add(book: Book(name: &amp;quot;Book4&amp;quot;))
var iterator = bookShelf.makeIterator()
while let book = iterator.next() {
print(book.name)
}
// output:
// Book1
// Book2
// Book3
// Book4
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>Swift에서는 &lt;code>nil&lt;/code> 값을 제공하므로 &lt;code>hasNext()&lt;/code> 메서드 대신 &lt;code>next()&lt;/code> 메서드가 &lt;code>nil&lt;/code>을 반환하면 순회를 종료하도록 구현합니다.&lt;/p>
&lt;/blockquote>
&lt;p>코드에 따르면 각 구조체는 다음 역할을 따릅니다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Iterator&lt;/code>: Iterator&lt;/li>
&lt;li>&lt;code>BookShelfIterator&lt;/code>: ConcreteIterator&lt;/li>
&lt;li>&lt;code>Iterable&lt;/code>: Aggregate&lt;/li>
&lt;li>&lt;code>BookShelf&lt;/code>: ConcreteAggregate&lt;/li>
&lt;/ul>
&lt;p>이렇게 순회를 담당하는 로직을 별도의 클래스로 분리하여 확장성을 높이는 것이 Iterator Pattern의 핵심입니다. 인터페이스를 활용한 이러한 확장성 및 다형성 덕분에 &lt;code>Iterator&lt;/code> 인터페이스만 구현하고 있으면 모든 순회가 필요한 로직에 적용할 수 있습니다.&lt;/p>
&lt;h2 id="in-swift">In Swift&lt;/h2>
&lt;p>이미 Swift에서는 &lt;a
class="underline-lsre"
href="https://developer.apple.com/documentation/swift/iteratorprotocol"
target="_blank" rel="noopener noreferrer nofollow"
>IteratorProtocol&lt;/a
>
프로토콜을 제공하여 어떠한 클래스든 &lt;code>IteratorProtocol&lt;/code>을 채택하여 &lt;code>for in&lt;/code> 구문에 활용할 수 있습니다. (Aggregate 역할을 &lt;code>Sequence&lt;/code> 프로토콜이 수행합니다.)&lt;/p>
&lt;p>Apple 공식 문서의 예제를 가져왔습니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">struct Countdown: Sequence {
let start: Int
func makeIterator() -&amp;gt; CountdownIterator {
return CountdownIterator(self)
}
}
struct CountdownIterator: IteratorProtocol {
let countdown: Countdown
var times = 0
init(_ countdown: Countdown) {
self.countdown = countdown
}
mutating func next() -&amp;gt; Int? {
let nextNumber = countdown.start - times
guard nextNumber &amp;gt; 0 else { return nil }
times += 1
return nextNumber
}
}
let countdown3 = Countdown(start: 3)
for count in countdown3 {
print(&amp;quot;\(count)...&amp;quot;)
}
// output:
// 3..
// 2..
// 1..
&lt;/code>&lt;/pre>
&lt;p>&lt;code>CountDown&lt;/code>은 ConcreteAggregate 역할을 수행하며, &lt;code>CountdownIterator&lt;/code>는 ConcreteIterator 역할을 수행합니다. 이렇게 순회 로직을 분리하는 방식으로 Collection 형식이 아니라 하더라도 순회 로직을 추가함으로서 순회 가능한 객체를 만들 수 있다는 장점이 있습니다.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://refactoring.guru/design-patterns/iterator"
target="_blank" rel="noopener noreferrer nofollow"
>Iterator Pattern : Refactoring Guru&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://developer.apple.com/documentation/swift/iteratorprotocol"
target="_blank" rel="noopener noreferrer nofollow"
>IteratorProtocol : Apple&lt;/a
>
&lt;/li>
&lt;/ul></description></item><item><title>[내배캠] Swift 기초 개인 과제</title><link>https://jinyongp.dev/learn/nbcamp/3/</link><pubDate>Wed, Jul 19 04:26:26 2023 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/learn/nbcamp/3/</guid><description>&lt;p>본 캠프가 시작되고 2주차가 되었습니다.&lt;/p>
&lt;p>이번 주차에선 Swift를 학습하고 간단한 연산 기능을 제공하는 계산기를 만들어 보는 과제를 수행했습니다.&lt;/p>
&lt;p>캠프에서는 자기주도적 학습 방식을 추구하기 때문에 주어지는 학습 자료 외에도 스스로 조사하고 학습해야 합니다.
주어지는 학습자료만으로는 깊게 학습할 수 없었기에 공식 문서와 다른 강의를 병행하며 부족한 부분을 채워야 합니다.&lt;/p>
&lt;p>저는 캠프 참여 이전에 이러한 부분을 인지하고 있었으므로 자세한 문법이나 이론 관련한 내용은 &lt;a
class="underline-lsre"
href="https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8?gad=1&amp;amp;gclid=Cj0KCQjw8NilBhDOARIsAHzpbLDMCagwbVBR_-ZFhM3GKE2eX1sD38Wr2Sa5WN2ZL07NSM1FPGZ54b0aAn__EALw_wcB"
target="_blank" rel="noopener noreferrer nofollow"
>앨런 Swift 문법 마스터 스쿨&lt;/a
>
과정을 병행하며 보충했습니다.&lt;/p>
&lt;p>과제를 수행하기에 충분한 문법과 이론을 학습했고, 이를 기반으로 CLI에서 실행할 수 있는 간단한 계산기 툴을 작성했습니다.&lt;/p>
&lt;h3 id="requirements">Requirements&lt;/h3>
&lt;ul>
&lt;li>1단계: 덧셈, 뺄셈, 곱셈, 나눗셈 연산 기능을 제공하는 Calculator 클래스 구현&lt;/li>
&lt;li>2단계: 1단계에서 구현한 Calculator 클래스를에 나머지 연산 기능 추가&lt;/li>
&lt;li>3단계: 각 연산을 개별 연산 클래스로 분리하고 Calculator와 연결 (feat. 단일 책임 원칙)&lt;/li>
&lt;li>4단계: 연산 클래스를 추상화한 추상 클래스 작성 (feat. 결합도, 의존성 역전 원칙)&lt;/li>
&lt;/ul>
&lt;h3 id="directory-structure">Directory Structure&lt;/h3>
&lt;pre>&lt;code class="language-text">.
├── Sources/
│ ├── Operators/
│ │ ├── AddOperator.swift
│ │ ├── SubOperator.swift
│ │ ├── MulOperator.swift
│ │ ├── DivOperator.swift
│ │ ├── ModOperator.swift
│ │ └── Operator.swift
│ ├── Calculator.swift
│ └── main.swift
├── Package.swift
└── README.md
&lt;/code>&lt;/pre>
&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;h4 id="setup">Setup&lt;/h4>
&lt;p>과제에서는 단순히 연산 후 출력하는 걸 요구하고 있지만, 저는 &lt;code>readLine&lt;/code> 함수를 활용하여 사용자로부터 입력을 받아 계속 연산이 가능하도록 구현했습니다.&lt;/p>
&lt;p>실행 가능한 파일로 작성하기 위해 &lt;a
class="underline-lsre"
href="https://developer.apple.com/documentation/xcode/creating-a-standalone-swift-package-with-xcode"
target="_blank" rel="noopener noreferrer nofollow"
>해당 문서&lt;/a
>
를 참고하여 프로젝트를 생성했습니다.&lt;/p>
&lt;pre>&lt;code class="language-sh">$ swift package init --type executable
&lt;/code>&lt;/pre>
&lt;p>위 명령어를 실행하면 현재 위치한 폴더에 &lt;code>Package.swift&lt;/code> 파일을 생성합니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">// swift-tools-version: 5.8
// The swift-tools-version declares the minimum version of Swift required to build this package.
import PackageDescription
let package = Package(
name: &amp;quot;calculator-cli&amp;quot;,
targets: [
// Targets are the basic building blocks of a package, defining a module or a test suite.,
// Targets can depend on other targets in this package and products from dependencies.
.executableTarget(
name: &amp;quot;calc&amp;quot;,
path: &amp;quot;Sources&amp;quot;
),
]
)
&lt;/code>&lt;/pre>
&lt;p>이 파일에서 프로젝트에 대한 의존성 관리 및 빌드 설정 등을 할 수 있습니다.&lt;/p>
&lt;p>&lt;code>Sources&lt;/code> 폴더에 &lt;code>main.swift&lt;/code> 또한 생성되므로 &lt;code>swift run&lt;/code> 명령어를 실행하여 프로젝트를 실행할 수 있습니다.&lt;/p>
&lt;h4 id="impl-operator-protocol">Impl Operator protocol&lt;/h4>
&lt;p>각 연산에 대한 클래스의 명세를 정하기 위해 &lt;code>Operator&lt;/code> 프로토콜을 작성했습니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">protocol Operator {
func operate&amp;lt;Operand&amp;gt;(_ lhs: Operand, _ rhs: Operand) -&amp;gt; Operand
}
&lt;/code>&lt;/pre>
&lt;p>이를 토대로 덧셈, 뺄셈, 곱셈, 나눗셈, 나머지 연산 클래스를 작성했습니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">class AddOperator: Operator {
func operate&amp;lt;Operand&amp;gt;(_ lhs: Operand, _ rhs: Operand) -&amp;gt; Operand {
return lhs + rhs
}
}
&lt;/code>&lt;/pre>
&lt;p>여기서 &lt;code>lhs + rhs&lt;/code> 에서 &lt;code>Binary operator '+' cannot be applied to two 'Operand' operands&lt;/code> 에러가 발생합니다. &lt;code>Operand&lt;/code> 타입이 덧셈 기능을 제공하는지 모르기 때문입니다.&lt;/p>
&lt;p>이를 해결하려면 &lt;code>Operand&lt;/code> 타입이 연산 가능한 타입만 올 수 있도록 제약을 걸 필요가 있습니다. &lt;code>Calculable&lt;/code> 프로토콜을 추가하여 이를 준수하는 타입만 올 수 있도록 제약을 걸었습니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">protocol Operator {
func operate&amp;lt;Operand: Calculable&amp;gt;(_ lhs: Operand, _ rhs: Operand) -&amp;gt; Operand
}
protocol Calculable {
static func +(lhs: Self, rhs: Self) -&amp;gt; Self
static func -(lhs: Self, rhs: Self) -&amp;gt; Self
static func *(lhs: Self, rhs: Self) -&amp;gt; Self
static func /(lhs: Self, rhs: Self) -&amp;gt; Self
static func %(lhs: Self, rhs: Self) -&amp;gt; Self
}
extension Int: Calculable {}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>Calculable&lt;/code> 프로토콜을 추가하고 &lt;code>Int&lt;/code> 타입이 이를 준수하도록 확장(extension)했습니다.&lt;/p>
&lt;p>하지만, 위와 같은 방식으로 &lt;code>Double&lt;/code> 타입을 확장했을 때, &lt;code>Type 'Double' does not conform to protocol 'Calculable'&lt;/code> 에러가 발생합니다. 실수 타입인 &lt;code>Double&lt;/code>은 나머지 연산에 대한 동작이 정의되어 있지 않기 때문입니다. 단순히 정수 타입으로 동작하도록 확장해줍니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">extension Double: Calculable {
static func %(lhs: Self, rhs: Self) -&amp;gt; Self {
return Double(Int(lhs) % Int(rhs))
}
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-swift">class ModOperator: Operator {
func operate&amp;lt;Operand&amp;gt;(_ lhs: Operand, _ rhs: Operand) -&amp;gt; Operand where Operand : Calculable {
return lhs % rhs
}
}
&lt;/code>&lt;/pre>
&lt;p>이로써 나머지 연산에 대해서도 &lt;code>Double&lt;/code> 타입을 사용할 수 있게 되었고, &lt;code>Operator&lt;/code> 프로토콜을 준수하는 &lt;code>ModOperator&lt;/code> 클래스를 작성할 수 있게 되었습니다. (SPR. 단일 책임 원칙)&lt;/p>
&lt;h4 id="impl-calculator-class">Impl Calculator class&lt;/h4>
&lt;p>작성한 연산자를 언제든 사용할 수 있는 형태로 하여 Dictionary 형태로 외부에서 주입할 수 있도록 작성했습니다.&lt;/p>
&lt;p>&lt;code>_result&lt;/code>는 여태까지 연산한 결과를 갖고 있는 저장 프로퍼티이고, &lt;code>calculate&lt;/code> 메서드를 호출하여 연산을 수행합니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">import Foundation
class Calculator&amp;lt;T: Calculable&amp;gt; {
private var _result: T
private var _operators: [String: Operator]
init(defaultValue: T? = nil, operators: [String: Operator] = [:]) {
_result = defaultValue ?? Calculator.zero()
_operators = operators
}
var result: T { _result }
var operators: [String] { Array(_operators.keys) }
@discardableResult
func calculate(_ operand: T, name: String) -&amp;gt; T {
guard let operation = _operators[name] else { return _result }
_result = operation.operate(_result, operand)
return _result
}
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-swift">let calculator = Calculator&amp;lt;Double&amp;gt;(
operators: [
&amp;quot;+&amp;quot;: AddOperator(),
&amp;quot;-&amp;quot;: SubOperator(),
&amp;quot;*&amp;quot;: MulOperator(),
&amp;quot;/&amp;quot;: DivOperator(),
&amp;quot;%&amp;quot;: ModOperator(),
]
)
calculator.calculate(10, name: &amp;quot;+&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>이로써 &lt;code>Calculator&lt;/code>는 구체적인 클래스가 아닌 추상화된 프로토콜에 의존합니다. (DIP. 의존성 역전 원칙)&lt;/p>
&lt;h3 id="trouble-shooting">Trouble Shooting&lt;/h3>
&lt;h4 id="1-0으로-초기화할-때-제네릭-타입으로-변환할-수-없는-문제">1. 0으로 초기화할 때 제네릭 타입으로 변환할 수 없는 문제&lt;/h4>
&lt;p>계산기이니 &lt;code>clear&lt;/code> 메서드를 작성했고, 이는 결과를 0으로 초기화하는 단순한 작업을 수행합니다. &lt;code>Int&lt;/code> 타입은 0으로 초기화하는 반면에 &lt;code>Double&lt;/code>은 0.0으로 초기화해야 했기 때문입니다. 제네릭 타입으로부터 이를 확인할 수 있는 방법은 없었지만, 0과 0.0 이외에 경우는 없다고 가정하고 nullish coalescing operator를 사용하여 해결했습니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">private static func zero() -&amp;gt; T {
return 0 as? T ?? 0.0 as! T
}
&lt;/code>&lt;/pre>
&lt;h4 id="2-첫-문자를-제외한-문자열-가져오기">2. 첫 문자를 제외한 문자열 가져오기&lt;/h4>
&lt;p>Swift에서 문자열을 조작하기란 다른 언어에 비해 번거로운 점이 많았습니다&amp;hellip; index 또한 단순히 숫자가 아니라 String.Index를 생성하여 전달해야했고, 주어진 Index로부터 어느정도 떨어졌는지하는 방식으로 문자열을 가져와야했습니다.&lt;/p>
&lt;p>첫 문자를 제외하고 문자열을 가져오려면 다음 방식으로 가져와야 합니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">let input: String = &amp;quot;Hello, World!&amp;quot;
input[input.index(input.startIndex, offsetBy: 1)...] // ello, World!
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>&lt;code>input.index&lt;/code> 메서드를 호출하여 &lt;code>String.Index&lt;/code> 타입의 인덱스를 생성합니다. 이때, &lt;code>input.startIndex&lt;/code>를 기준으로 &lt;code>offsetBy&lt;/code> 만큼 떨어진 인덱스를 생성합니다.&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://developer.apple.com/documentation/swift/partialrangefrom"
target="_blank" rel="noopener noreferrer nofollow"
>PartialRangeFrom&lt;/a
>
문법을 활용하여 해당 인덱스부터 문자열을 가져옵니다.&lt;/li>
&lt;/ol>
&lt;p>나중에 알게된 내용인데 단순하게 &lt;code>dropFirst&lt;/code> 메서드를 활용해도 됩니다.&lt;/p>
&lt;pre>&lt;code class="language-swift">input.dropFirst() // ello, World!
&lt;/code>&lt;/pre>
&lt;p>문자열 관련 메서드는 대개 &lt;code>Self.SubSequence&lt;/code> 타입을 반환합니다. 잘라낸 문자열을 저장하기 위헤 새로운 메모리 공간을 할당하는 것이 아닌 기존의 문자열에서 필요한 부분에 직접 접근하기 때문입니다. 따라서, 문자열로서 사용하고 싶다면 &lt;code>String&lt;/code>으로 변환해야 합니다.&lt;/p>
&lt;h3 id="retrospective">Retrospective&lt;/h3>
&lt;p>객체 지향 프로그래밍의 5대 원칙 중 단일 책임 원칙(Single Responsibility Principle)과 의존성 역전 원칙(Dependency Inversion Principle)을 적용하여 계산기를 구현해보았습니다. 원칙을 적용해보기 위해 프로토콜로 명세를 작성하고 이를 준수하는 클래스는 작성하는 작업을 진행하면서 코드의 중복을 제거하고 확정성 높은 프로그램을 작성할 수 있었습니다.&lt;/p>
&lt;p>앞으로 이외에도 적용할 수 있는 원칙을 찾아보고 적합한 디자인 패턴 및 기법을 추가로 학습하여 적용해보려고 합니다.&lt;/p></description></item><item><title>[내배캠] 첫번째 팀 프로젝트</title><link>https://jinyongp.dev/learn/nbcamp/2/</link><pubDate>Wed, Jul 19 01:27:06 2023 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/learn/nbcamp/2/</guid><description>&lt;p>사전캠프에서 학습한 Flutter를 활용하여 첫번째 팀 프로젝트를 진행했습니다.&lt;/p>
&lt;p>4일간 진행한 프로젝트로 목적은 앱 개발 전반의 과정을 익히기 위함이지만, 보다 팀원분들과의 소통과 협업 관점에 비중으로 두고 프로젝트를 진행하였습니다.&lt;/p>
&lt;p>프로젝트의 주제는 팀과 팀원의 소개를 담은 앱을 작성하는 것으로, 각자 자신의 소개를 담은 상세 페이지를 작성하고 합치기로 결정하였습니다.
저는 상세 페이지와 더불어 메인 페이지와 각 상세 페이지에서 쓰일 댓글 관리 서비스를 맡았습니다.&lt;/p>
&lt;p>그 중에서도 댓글 관리 서비스를 어떻게 구현했는지 정리해보고자 합니다.&lt;/p>
&lt;p>&lt;a
class="underline-lsre"
href="https://github.com/nbcamp/introduce-e1if"
target="_blank" rel="noopener noreferrer nofollow"
>프로젝트 저장소&lt;/a
>
&lt;/p>
&lt;h2 id="의존성-주입을-위해-인터페이스-적용하기">의존성 주입을 위해 인터페이스 적용하기&lt;/h2>
&lt;p>사전캠프에서도 다뤘지만, Service 단에서 &lt;code>shared_preferences&lt;/code>를 사용하기 위해 서비스 파일 내에서 직접 불러와서 사용해주는 방식이 아니라 &lt;code>main.dart&lt;/code>에서 &lt;code>save&lt;/code>와 &lt;code>load&lt;/code> 함수를 주입해주는 방식으로 구현했었습니다.&lt;/p>
&lt;p>허나, 아래처럼 &lt;code>save&lt;/code> 혹은 &lt;code>load&lt;/code> 둘 다 구현해야하는 걸 강제할 수 없었습니다. 또한, &lt;code>shared_preferences&lt;/code>외에 다른 걸로 변경할 때도 번거롭습니다&lt;/p>
&lt;pre>&lt;code class="language-ts">void main() async {
WidgetsFlutterBinding.ensureInitialized();
SharedPreferences pref await SharedPreferences.getInstance();
runApp(MultiProvider(
providers: [
ChangeNotifierProvider(
create: (_) =&amp;gt; MemoService(
save: (String payload) async =&amp;gt; await pref.setString(&amp;quot;memo&amp;quot;, payload),
// load: () async =&amp;gt; pref.getString(&amp;quot;memo&amp;quot;), // 에러를 발생시키지 않음
),
),
],
child: const MyApp(),
));
}
&lt;/code>&lt;/pre>
&lt;p>이를 해결하기 위해 &lt;code>IO&lt;/code> 인터페이스를 구현했습니다.&lt;/p>
&lt;pre>&lt;code class="language-ts">abstract class IO {
Future&amp;lt;void&amp;gt; save(String payload);
Future&amp;lt;String?&amp;gt; load();
}
&lt;/code>&lt;/pre>
&lt;p>dart에서는 인터페이스를 생성하기 위해 &lt;code>abstract class&lt;/code> 키워드를 사용해야 합니다. &lt;code>IO&lt;/code> 인터페이스는 &lt;code>save&lt;/code>와 &lt;code>load&lt;/code> 함수에 대한 명세를 제공합니다. 이를 &lt;code>CommentService&lt;/code>에 적용합니다.&lt;/p>
&lt;pre>&lt;code class="language-ts">class CommentService extends ChangeNotifier {
final Map&amp;lt;String, List&amp;lt;Comment&amp;gt;&amp;gt; _comments = {};
IO? io;
CommentService({this.io}) {
//
}
...
}
&lt;/code>&lt;/pre>
&lt;p>이제 &lt;code>io&lt;/code> 인스턴스를 외부에서 주입해줄 수 있습니다. &lt;code>shared_preferences&lt;/code>를 사용할 예정이므로 &lt;code>SharedPreferencesIO&lt;/code> 클래스를 생성합니다.&lt;/p>
&lt;pre>&lt;code class="language-tsx">class SharedPreferencesIO implements IO {
late Future&amp;lt;SharedPreferences&amp;gt; pref;
SharedPreferencesIO() {
pref = SharedPreferences.getInstance();
}
@override
Future&amp;lt;String?&amp;gt; load() {
return pref.then((pref) =&amp;gt; pref.getString('comments'));
}
@override
Future&amp;lt;void&amp;gt; save(String payload) async {
pref.then((pref) =&amp;gt; pref.setString('comments', payload));
}
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-ts">void main() async {
WidgetsFlutterBinding.ensureInitialized();
runApp(MultiProvider(
providers: [
ChangeNotifierProvider(
create: (_) =&amp;gt; CommentService(
io: SharedPreferencesIO(),
),
),
],
child: MainApp(),
));
}
&lt;/code>&lt;/pre>
&lt;p>구현한 &lt;code>SharedPreferencesIO&lt;/code> 클래스를 &lt;code>main.dart&lt;/code>에서 &lt;code>CommentService&lt;/code>에 주입해줍니다.&lt;/p>
&lt;p>이로써, &lt;code>save&lt;/code>와 &lt;code>load&lt;/code> 모두 구현해야 함을 강제할 수 있게 되었고, &lt;code>IO&lt;/code> 인터페이스를 상속하는 클래스를 여러 개 추가하여 상황에 따라 교체할 수 있어 확장성을 높였습니다.&lt;/p>
&lt;h2 id="데이터-송수신-로직-추상화하기">데이터 송수신 로직 추상화하기&lt;/h2>
&lt;p>&lt;code>CommentService&lt;/code>에서 내부적으로 데이터를 저장하고 불러오는 &lt;code>_save&lt;/code>와 &lt;code>_load&lt;/code> 함수가 있었습니다.&lt;/p>
&lt;pre>&lt;code class="language-ts">Future&amp;lt;void&amp;gt; _save() {
if (save == null) return Future.value();
String payload = jsonEncode(_memos.map((m) =&amp;gt; m.toJson()).toList());
return save!(payload);
}
Future&amp;lt;void&amp;gt; _load() async {
if (load == null) return;
String? payload = await load!();
if (payload == null) return;
_memos.clear();
_memos.addAll(jsonDecode(payload).map((e) =&amp;gt; Memo.fromJson(e)));
}
&lt;/code>&lt;/pre>
&lt;p>여기서 데이터를 String 타입의 payload로 만들거나, 반대로 payload를 데이터로 변환하는 작업을 수행했었습니다.
언뜻보면 null 체크를 하고 종료하는 부분이나 payload를 처리하는 부분은 중복된 부분이기에 별도의 함수로 분리하고 싶었습니다.&lt;/p>
&lt;p>그래서 &lt;code>DataHandler&lt;/code> 추상 클래스르 작성하였습니다.&lt;/p>
&lt;pre>&lt;code class="language-ts">mixin DataHandler {
IO? io;
Future&amp;lt;void&amp;gt; import(String payload);
Future&amp;lt;String&amp;gt; export();
Future&amp;lt;void&amp;gt; save() async {
if (io == null) return Future.value();
var payload = await export();
io?.save(payload);
}
Future&amp;lt;void&amp;gt; load() async {
if (io == null) return Future.value();
var payload = await io!.load();
if (payload == null) return;
import(payload);
}
}
&lt;/code>&lt;/pre>
&lt;p>dart에서 mixin을 활용하여 추상 클래스를 작성할 수 있습니다.
&lt;code>save&lt;/code>와 &lt;code>load&lt;/code> 함수는 이미 구현되어 있어 동일한 작업을 수행하지만, &lt;code>import&lt;/code>와 &lt;code>export&lt;/code> 함수는 재정의가 필요합니다. 이를 &lt;code>CommentService&lt;/code>에 적용합니다.&lt;/p>
&lt;pre>&lt;code class="language-ts">class UseState {
final List&amp;lt;Comment&amp;gt; comments;
final void Function(List&amp;lt;Comment&amp;gt; Function()) setState;
UseState({
required this.comments,
required this.setState,
});
}
class CommentService extends ChangeNotifier with DataHandler {
final Map&amp;lt;String, List&amp;lt;Comment&amp;gt;&amp;gt; _comments = {};
CommentService({IO? io}) {
this.io = io;
try {
load().then((_) =&amp;gt; notifyListeners());
} catch (error) {
// ignore
}
}
UseState useState(String name) {
return UseState(
comments: List.unmodifiable(_comments[name] ?? []),
setState: (newComments) {
_comments[name] = newComments();
notifyListeners();
save();
},
);
}
@override
Future&amp;lt;void&amp;gt; import(String payload) async {
jsonDecode(payload).forEach((key, values) {
if (values is! List) return;
_comments[key] = values.map((value) =&amp;gt; Comment.fromJson(value)).toList();
});
}
@override
Future&amp;lt;String&amp;gt; export() async {
return jsonEncode(
_comments.map(
(key, values) =&amp;gt; MapEntry(
key,
values.map((comment) =&amp;gt; comment.toJson()).toList(),
),
),
);
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>mixin&lt;/code>을 상속하기 위해선 &lt;code>with&lt;/code> 키워드를 사용해야 합니다. &lt;code>DataHandler&lt;/code>를 상속하면서 &lt;code>CommentService&lt;/code>에서 구현해야 하는 함수들을 재정의합니다.
&lt;code>import&lt;/code>와 &lt;code>export&lt;/code> 함수는 단순히 JSON 형태의 stringify와 parse 작업을 수행합니다. 이로써 상속을 통해 중복 코드를 제거하고 함수의 역할을 분리할 수 있었습니다.&lt;/p></description></item><item><title>[내배캠] 사전캠프</title><link>https://jinyongp.dev/learn/nbcamp/1/</link><pubDate>Tue, Jun 27 11:16:56 2023 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/learn/nbcamp/1/</guid><description>&lt;h2 id="2023년-06월-30일">2023년 06월 30일&lt;/h2>
&lt;p>5주차 강의는 HTTP API 요청 방법을 익혔습니다. 다음주는 광고 붙이는건데&amp;hellip; 이번이 마지막일 듯 하네요.&lt;/p>
&lt;h3 id="requesting-network-data">Requesting Network Data&lt;/h3>
&lt;p>HttpClient로는 &lt;a
class="underline-lsre"
href="https://pub.dev/packages/dio"
target="_blank" rel="noopener noreferrer nofollow"
>dio&lt;/a
>
패키지를 활용했습니다. &lt;br>
책 정보를 불러올 수 있는 Google API를 활용하여 Watcha Pedia 서비스를 구현했습니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">// main.dart
void main() async {
late SharedPreferences pref;
if (!kIsWeb) {
WidgetsFlutterBinding.ensureInitialized();
pref = await SharedPreferences.getInstance();
}
runApp(MultiProvider(
providers: [
ChangeNotifierProvider(
create: (_) =&amp;gt; BookService(
get: &amp;lt;T&amp;gt;(String query) async {
String url =
'https://www.googleapis.com/books/v1/volumes?q=$query&amp;amp;startIndex=0&amp;amp;maxResults=40';
Response res = await Dio().get(url);
if (res.statusCode != 200) {
throw Exception('http.get error: statusCode= ${res.statusCode}');
}
return res.data['items'];
},
save: (String payload) =&amp;gt; pref.setString('likedBooks', payload),
load: () =&amp;gt; pref.getString('likedBooks'),
),
),
],
child: const MainApp(),
));
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-jsx">// services/book.dart
final Future&amp;lt;T&amp;gt; Function&amp;lt;T&amp;gt;(String url) get;
final FutureOr Function(String payload)? save;
final FutureOr Function()? load;
BookService({required this.get, this.save, this.load}) {
_load().then((_) =&amp;gt; notifyListeners());
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>BookService&lt;/code> 클래스에서 책 정보를 가져오는 함수(&lt;code>get&lt;/code>)와 정보를 저장(&lt;code>save&lt;/code>)하고 불러오는(&lt;code>load&lt;/code>) 함수를 주입할 수 있도록 구현했습니다.&lt;/p>
&lt;h3 id="webview-page">WebView Page&lt;/h3>
&lt;p>앱 상에서 외부 웹 링크 페이지를 띄우기 위해선 &lt;code>webview_flutter&lt;/code> 패키지를 사용해야 합니다. &lt;br>
책 목록에서 책을 클릭하면 해당 책의 정보를 보여주는 페이지를 띄웁니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">// screens/webview.dart
class WebViewScreen extends StatelessWidget {
WebViewScreen({
super.key,
required this.url,
});
String url;
@override
Widget build(BuildContext context) {
return Scaffold(
appBar: AppBar(
backgroundColor: Colors.grey,
title: Text(url),
),
body: WebView(initialUrl: url),
);
}
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-jsx">// widgets/book_tile.dart
onTap: () {
Navigator.push(
context,
MaterialPageRoute(
builder: (_) =&amp;gt; WebViewScreen(
url: book.previewLink.replaceFirst('http:', 'https:')),
),
);
},
&lt;/code>&lt;/pre>
&lt;h3 id="watcha-pedia">Watcha Pedia&lt;/h3>
&lt;iframe src="https://dartpad.dev/embed-flutter.html?id=7a51cd7685929c94d82ca0b707f69516&amp;split=60&amp;theme=dark" style="width:100%; height: 500px;">&lt;/iframe>
&lt;p>| Dartpad에서 &lt;code>Image.network&lt;/code> 불러오기가 안 되는 문제가 있습니다. &lt;br>
| &lt;code>dio&lt;/code>가 동작하지 않아, &lt;code>http&lt;/code> 모듈로 대체했습니다. &lt;br>
| webview가 동작하지 않습니다.&lt;/p>
&lt;h3 id="project-structure">Project Structure&lt;/h3>
&lt;p>Dartpad에서는 확인할 수 없지만, 프로젝트 구조에 대해 고민해보았습니다.&lt;/p>
&lt;ul>
&lt;li>screens: 화면&lt;/li>
&lt;li>models: 데이터 모델 (자료구조)&lt;/li>
&lt;li>services: 서비스 (비즈니스 로직)&lt;/li>
&lt;li>widgets: 위젯 (컴포넌트)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-txt">lib/
├── models/
│ └── book.dart
├── screens/
│ ├── home.dart
│ ├── like.dart
│ ├── search.dart
│ └── webview.dart
├── services/
│ └── book.dart
├── widgets/
│ └── book_tile.dart
└── main.dart
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="2023년-06월-29일">2023년 06월 29일&lt;/h2>
&lt;p>오늘은 심플한 메모앱을 만들면서 CRUD 기능 구현과 함께 상태 관리 패키지인 &lt;a
class="underline-lsre"
href="https://pub.dev/packages/provider"
target="_blank" rel="noopener noreferrer nofollow"
>Provider&lt;/a
>
그리고 &lt;a
class="underline-lsre"
href="https://pub.dev/packages/shared_preferences"
target="_blank" rel="noopener noreferrer nofollow"
>shared_preferences&lt;/a
>
를 이용하여 데이터를 기기에 저장하여 앱을 종료 후 다시 열어도 정보가 유지되도록 기능을 구현했습니다.&lt;/p>
&lt;p>flutter의 패키지는 &lt;a
class="underline-lsre"
href="https://pub.dev/"
target="_blank" rel="noopener noreferrer nofollow"
>pub.dev&lt;/a
>
에서 조회할 수 있습니다. 패키지를 설치하기 위해서도 &lt;code>flutter pub&lt;/code> 명령어를 사용합니다.&lt;/p>
&lt;pre>&lt;code class="language-sh">$ flutter pub add provider shared_preferences
&lt;/code>&lt;/pre>
&lt;h3 id="provider">Provider&lt;/h3>
&lt;p>Provider는 flutter의 상태 관리 패키지로 전역에서 데이터를 쥐고 제어할 수 있는 서비스를 관리해줍니다. &lt;code>Memo&lt;/code> 클래스와 함께 &lt;code>MemoService&lt;/code>를 추가해보았습니다. &lt;code>MemoService&lt;/code>는 메모 목록을 관리하고 CRUD 기능을 제공합니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">// lib/services/memo.dart
class Memo {
Memo({ required this.content });
String content;
}
class MemoService extends ChangeNotifier {
List&amp;lt;Memo&amp;gt; memos = [];
void create(String content) { ... }
void update(int index, String content) { ... }
void delete(int index) { ... }
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>main.dart&lt;/code>의 &lt;code>runApp&lt;/code>에 Provider를 통해 &lt;code>MemoService&lt;/code>를 등록해야 합니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">// lib/main.dart
void main() {
runApp(
MultipleProvider(
providers: [
ChangeNotifierProvider(create: (_) =&amp;gt; MemoService()),
],
child: const MyApp(),
),
);
}
&lt;/code>&lt;/pre>
&lt;p>이제 위젯트리 전체를 &lt;code>Consumer&amp;lt;MemoService&amp;gt;&lt;/code>로 감싸주면 &lt;code>MemoService&lt;/code> 내에서 &lt;code>notifyListeners()&lt;/code>가 호출될 때마다 전체 화면을 다시 그립니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">Widget build(BuildContext context) {
return Consumer&amp;lt;MemoService&amp;gt;(builder: (context, memoService, child) {
return Scaffold(
...
)
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>Consumer&lt;/code>는 전체 화면을 다시 그리지만, 화면 리렌더링 없이 &lt;code>MemoService&lt;/code>의 인스턴스를 가져오고 싶다면, &lt;code>context.read&amp;lt;MemoService&amp;gt;()&lt;/code>를 통해 가져올 수 있습니다.&lt;/p>
&lt;h3 id="shared_preferences">shared_preferences&lt;/h3>
&lt;p>&lt;code>SharedPreferences&lt;/code>는 앱을 껐다 켜도 데이터를 유지할 수 있는 기능을 제공합니다. 다만 &lt;code>SharedPreferences&lt;/code>와 같이 데이터를 유지해줄 수 있는 방법은 다양하므로 언제든 교체할 수 있도록 외부에서 주입해주는 방식으로 구현했습니다.&lt;/p>
&lt;p>&lt;code>MemoService&lt;/code>에 데이터를 저장하고 불러오는 함수를 매개변수를 받을 수 있게끔 추가합니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">class MemoService extends ChangeNotifier {
final List&amp;lt;Memo&amp;gt; _memos = [];
final Future&amp;lt;void&amp;gt; Function(String payload)? save;
final Future&amp;lt;String?&amp;gt; Function()? load;
MemoService({
this.save,
this.load,
}) {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>main.dart&lt;/code>에서 &lt;code>SharedPreferences&lt;/code>의 인스턴스를 생성한 후 데이터를 저장하고 불러오는 함수를 전달합니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">void main() async {
WidgetsFlutterBinding.ensureInitialized();
SharedPreferences pref = await SharedPreferences.getInstance();
runApp(MultiProvider(
providers: [
ChangeNotifierProvider(
create: (_) =&amp;gt; MemoService(
save: (String payload) async =&amp;gt; await pref.setString(&amp;quot;memo&amp;quot;, payload),
load: () async =&amp;gt; pref.getString(&amp;quot;memo&amp;quot;),
),
),
],
child: const MyApp(),
));
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>MemoService&lt;/code>에서 이를 적절하게 저장하고 불러올 때 호출합니다.&lt;/p>
&lt;pre>&lt;code class="language-jsx">String payload = jsonEncode(_memos.map((m) =&amp;gt; m.toJson()).toList());
return save!(payload);
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-jsx">String? payload = await load!();
if (payload == null) return;
_memos.clear();
_memos.addAll(jsonDecode(payload).map((e) =&amp;gt; Memo.fromJson(e)));
&lt;/code>&lt;/pre>
&lt;p>이로써 데이터를 항시 유지할 수 있고, 언제든 &lt;code>main.dart&lt;/code>만 수정하여 데이터 유지 방식을 변경할 수 있습니다.&lt;/p>
&lt;h3 id="my-memo">My Memo&lt;/h3>
&lt;iframe src="https://dartpad.dev/embed-flutter.html?id=beb656ed3cd6059afac59277a1d6ade8&amp;split=60&amp;theme=dark" style="width:100%; height: 500px;">&lt;/iframe>
&lt;p>구현한 앱은 다음의 기능을 제공합니다.&lt;/p>
&lt;ul>
&lt;li>하단 &lt;code>+&lt;/code> 아이콘을 눌러 새로운 메모를 생성할 수 있습니다. (메모 작성 페이지로 이동합니다.)&lt;/li>
&lt;li>아무런 내용을 작성하지 않는다면 메모가 추가되지 않습니다.&lt;/li>
&lt;li>내용을 추가하고 뒤로 가기 버튼을 누르면 새로운 메모가 추가됩니다.&lt;/li>
&lt;li>메모를 클릭하여 내용을 수정할 수 있습니다.&lt;/li>
&lt;li>메모를 클릭하고 쓰레기통 아이콘을 눌러 삭제할 수 있습니다.&lt;/li>
&lt;li>변경일 내림차순으로 정렬됩니다. (가장 최근에 변경된 메모가 상단에 위치합니다.)&lt;/li>
&lt;li>고정한 메모를 상단으로 올립니다.&lt;/li>
&lt;li>메모 목록은 앱을 종료 후 재시작해도 유지됩니다.&lt;/li>
&lt;/ul>
&lt;h3 id="trouble-shooting">Trouble Shooting&lt;/h3>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://stackoverflow.com/a/69671156"
target="_blank" rel="noopener noreferrer nofollow"
>shared_preferences 때문에 프로젝트가 실행되지 않을 때 대처법&lt;/a
>
&lt;/li>
&lt;li>&lt;code>SharedPreferences&lt;/code>의 인스턴스 변수를 전역에서 관리하는 것이 아닌, 데이터를 저장하고 불러오는 함수를 &lt;code>MemoService&lt;/code>에 주입하는 방식으로 리팩토링했습니다. (강의에선 아마 콜백함수에 대한 내용을 학습하지 않았으므로 전역에서 관리하도록 구현하신 것 같습니다.)&lt;/li>
&lt;li>웹에서는 &lt;code>SharedPreferences&lt;/code>의 인스턴스를 생성할 수 없습니다. &lt;code>shared_preferences_web&lt;/code>이 포함되어 있다는데 왜 동작을 안 하는지는 모르겠네요&amp;hellip; &lt;code>import 'package:flutter/foundation.dart' show kIsWeb;&lt;/code>를 불러와서 웹 환경이 아닐 때만 인스턴스를 생성하도록 수정했습니다.&lt;/li>
&lt;li>날짜 포맷팅을 위해 &lt;code>import 'package:intl/intl.dart';&lt;/code> 라이브러리를 추가로 활용했습니다.&lt;/li>
&lt;/ul>
&lt;p>전반으로 리액트나 뷰와 비슷한 느낌이라 기능 구현은 별로 어렵진 않았어서 다트 언어에 더 익숙해질 수 있는 시간이었네요.&lt;/p>
&lt;hr>
&lt;h2 id="2023년-06월-28일">2023년 06월 28일&lt;/h2>
&lt;p>오늘은 간단하게 StatelessWidget과 StatefulWidget 그리고 Navigation에 대해 학습했습니다. (이번이 2주차 내용입니다.)&lt;/p>
&lt;iframe src="https://dartpad.dev/embed-flutter.html?id=88bf678d41cdd472009b50585f45304b&amp;split=60&amp;theme=dark" style="width:100%; height: 500px;">&lt;/iframe>
&lt;h3 id="statelesswidget-vs-statefulwidget">StatelessWidget vs. StatefulWidget&lt;/h3>
&lt;ul>
&lt;li>StatelessWidget: 상태가 없는 위젯으로 처음에 한번만 &lt;code>build&lt;/code>를 호출합니다.&lt;/li>
&lt;li>StatefulWidget: 상태를 가진 위젯으로 상태가 변경될 때마다 &lt;code>build&lt;/code> 메서드를 호출하여 다시 그립니다.&lt;/li>
&lt;/ul>
&lt;p>위 두 위젯은 보통 상속하여 &lt;code>build&lt;/code> 메서드를 override하는 방식으로 사용합니다. StatefulWidget은 State를 변경하는 클래스가 별도로 필요합니다.&lt;/p>
&lt;h3 id="navigation">Navigation&lt;/h3>
&lt;p>Navigation은 Route라고 불리는 페이지를 전환하는 것을 의미하고 &lt;code>Navigator&lt;/code> 위젯으로 수행합니다. &lt;code>push&lt;/code>로 페이지를 이동하고 &lt;code>pop&lt;/code>으로 이전 페이지로 이동할 수 있습니다.&lt;/p>
&lt;h3 id="당근마켓daangn-앱-클론">당근마켓(Daangn) 앱 클론&lt;/h3>
&lt;iframe src="https://dartpad.dev/embed-flutter.html?id=2eef886fac601cbee5bceebdd320a255&amp;split=60&amp;theme=dark" style="width:100%; height: 500px;">&lt;/iframe>
&lt;p>Stateful한 Feed 위젯을 구현해보았고, 파일을 분리하여 작성해보았습니다. (dartpad는 파일 분리를 지원하지 않아 main.dart에 전부 있습니다&amp;hellip;. &lt;a
class="underline-lsre"
href="https://github.com/dart-lang/dart-pad/issues/2149"
target="_blank" rel="noopener noreferrer nofollow"
>22년도에 올라온 이슈인데...&lt;/a
>
)&lt;/p>
&lt;p>여기서 놀랐던 점은 &lt;code>ListView.builder&lt;/code>에 &lt;code>itemCount&lt;/code>를 명시하지 않으면 리스트 요소를 무한히 만들어낸다는 점입니다. 예전에 Recycle Scrolling을 구현하면서 겪은 제한으로는 적어도 요소의 최소 크기가 결정되어 있어야 하고, 요소의 개수를 어느정도 알고 있어야 했는데 그런거 없이 무한정 그려낼 수 있다는 점이 놀라웠습니다.&lt;/p>
&lt;p>&lt;a
class="underline-lsre"
href="https://docs.flutter.dev/get-started/flutter-for/android-devs#how-do-i-update-listviews-dynamically"
target="_blank" rel="noopener noreferrer nofollow"
>해당 문서&lt;/a
>
에서 &lt;code>ListView&lt;/code> 자체가 내부적으로 요소를 재활용(recycle)하는 동작으로 수행됨을 알 수 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>The recommended, efficient, and effective way to build a list uses a ListView.Builder. This method is great when you have a dynamic List or a List with very large amounts of data. This is essentially the equivalent of RecyclerView on Android, which automatically recycles list elements for you&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;h3 id="샤잠shazam-앱-클론">샤잠(Shazam) 앱 클론&lt;/h3>
&lt;iframe src="https://dartpad.dev/embed-flutter.html?id=252f87e790119799f8be13d1c7875a6d&amp;split=60&amp;theme=dark" style="width:100%; height: 500px;">&lt;/iframe>
&lt;p>사실 과제는 페이지 세 개 중 하나를 택해 수행하는 건데 그까이꺼 전부 클론해봤습니다. 리팩토링이 필요한 부분이 굉장히 많아보이긴 하지만&amp;hellip; 항상 언젠가 한다는 마음가짐으로&amp;hellip;&lt;/p>
&lt;p>탭 생성 및 이동 방법에 대해서 알게 되었고, 많고 많은 삽질을 하며 스크롤 요소를 어디에 어떻게 배치해야하는지 요령을 습득했습니다.&lt;/p>
&lt;p>가장 난해했던 부분&amp;hellip; overflow&amp;hellip; Scrollable하지 않은 페이지에서 요소가 화면을 벗어나면 &lt;code>A ListView A RenderFlex overflowed by &amp;lt;number&amp;gt; pixels on the bottom.&lt;/code> 에러가 발생합니다. Scrollable하게 만들어주기 위해 &lt;code>SingleChildScrollView&lt;/code>를 이용하거나 &lt;code>ListView&lt;/code>로 감싸줘야하고, &lt;code>Expanded&lt;/code>로 감싸야합니다.&lt;/p>
&lt;hr>
&lt;h2 id="2023년-06월-27일">2023년 06월 27일&lt;/h2>
&lt;p>&lt;a
class="underline-lsre"
href="https://nbcamp-android-ios-unity.oopy.io/0dc0a70c-49ca-499c-b2df-965a2828cca6"
target="_blank" rel="noopener noreferrer nofollow"
>내일배움캠프 iOS 과정&lt;/a
>
에 앞서 앱 개발 전반의 이해를 위해 Dart와 Flutter를 학습했습니다.&lt;/p>
&lt;p>지원을 거의 막바지에 하게 되었는데 사전캠프가 이미 진행 도중이었습니다. 다른 분들보다 진도가 느릴까 걱정되었지만, 본 캠프는 9 to 9(&amp;hellip;) 과정이니만큼 사전캠프도 바쁘게 해보고자 최대한 빨리 나가고자 했습니다. (국비 과정이라 하루에 최대 16개만 수강할 수 있는게 아쉽긴 합니다&amp;hellip;)&lt;/p>
&lt;p>강의는 스파르타코딩클럽의 &lt;a
class="underline-lsre"
href="https://spartacodingclub.kr/nb/app"
target="_blank" rel="noopener noreferrer nofollow"
>[왕초보] 플러터(Flutter)로 시작하는 앱개발 종합반&lt;/a
>
으로 진행했습니다.&lt;/p>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>Flutter는 크로스 플랫폼 개발을 위한 프레임워크로 Dart라는 언어로 작성합니다. 동일한 역할을 수행하는 React Native와 비교했을 때 등장 시기는 늦지만 등장부터 빠르게 치고 올라가 Github Star 수는 이미 압도적이라 할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://api.star-history.com/svg?repos=flutter/flutter,facebook/react-native&amp;amp;type=Date" alt="Star History Chart">
&lt;a
class="underline-lsre"
href="https://star-history.com/#flutter/flutter&amp;amp;facebook/react-native"
target="_blank" rel="noopener noreferrer nofollow"
>출처: Github Star History | Flutter vs. React Native&lt;/a
>
&lt;/p>
&lt;p>공식 문서 정리에 유튜브 채널까지&amp;hellip;&lt;br>
심지어 성능 또한 네이티브 못지않게 빠르다고 하니 Flutter를 써보지 않을 이유가 없을 듯 합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://api.flutter.dev/"
target="_blank" rel="noopener noreferrer nofollow"
>Flutter Docs&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://www.youtube.com/@flutterdev/videos"
target="_blank" rel="noopener noreferrer nofollow"
>Youtube Flutter Channel&lt;/a
>
&lt;/li>
&lt;/ul>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>전 brew로 설치 가능하면 전부 brew로 설치하는 편입니다.&lt;/p>
&lt;pre>&lt;code class="language-sh">$ brew install --cask flutter
&lt;/code>&lt;/pre>
&lt;p>설치 후 &lt;code>flutter&lt;/code> 명령어를 사용할 수 있습니다. &lt;code>doctor&lt;/code> 명령어로 정상적으로 설치됐는지 확인할 수 있습니다.&lt;/p>
&lt;pre>&lt;code class="language-sh">$ flutter doctor -v
Doctor summary (to see all details, run flutter doctor -v):
[✓] Flutter (Channel stable, 3.10.5, on macOS 13.4.1 22F82 darwin-arm64, locale en-KR)
[!] Android toolchain - develop for Android devices (Android SDK version 34.0.0)
✗ cmdline-tools component is missing
Run `path/to/sdkmanager --install &amp;quot;cmdline-tools;latest&amp;quot;`
See https://developer.android.com/studio/command-line for more details.
✗ Android license status unknown.
Run `flutter doctor --android-licenses` to accept the SDK licenses.
See https://flutter.dev/docs/get-started/install/macos#android-setup for more details.
[✓] Xcode - develop for iOS and macOS (Xcode 14.3.1)
[✓] Chrome - develop for the web
[✓] Android Studio (version 2022.2)
[✓] VS Code (version 1.79.2)
[✓] Connected device (2 available)
[✓] Network resources
! Doctor found issues in 1 category.
&lt;/code>&lt;/pre>
&lt;p>문제없이 실행하기 위해 필요한 도구 중 없는 것을 알려줍니다. 구글에서 제작한 flutter에서 vscode 설치 여부를 확인하고 있는게 좀 당황스럽긴 하지만 그만큼 vscode를 대신할만한 에디터가 없다는거겠죠.&lt;/p>
&lt;p>Android에서 문제가 발생했지만 노트북 용량이 부족하니 그냥 넘어가줍니다.&lt;/p>
&lt;p>VSCode에서는 다음 두 가지 Extension을 설치합니다. Flutter extension을 설치하면 dart는 알아서 설치됩니다.&lt;/p>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code"
target="_blank" rel="noopener noreferrer nofollow"
>Dart-Code.dart-code&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter"
target="_blank" rel="noopener noreferrer nofollow"
>Dart-Code.flutter&lt;/a
>
&lt;/li>
&lt;/ul>
&lt;p>Command Palette를 열고 &lt;code>Dart: Use Recommended Settings&lt;/code> 명령어를 수행합니다. 추천하는 다트 설정을 vscode 전역 설정에 추가되는데 전 그게 싫어서 Workspace에 &lt;code>.vscode/settings.json&lt;/code> 생성 후 옮겼습니다.&lt;/p>
&lt;pre>&lt;code class="language-sh">$ flutter create hello_flutter --empty
$ cd hello_flutter &amp;amp;&amp;amp; code .
&lt;/code>&lt;/pre>
&lt;p>위 명령어로 프로젝트를 생성한 뒤 flutter 프로젝트를 시작합니다.&lt;/p>
&lt;h3 id="practice">Practice&lt;/h3>
&lt;p>Flutter는 Widget이라고 불리는 가장 작은 단위의 모듈이 겹겹이 쌓여 전체 프로젝트를 구성합니다. 이를 위젯 트리라 부릅니다.&lt;/p>
&lt;p>&lt;a
class="underline-lsre"
href="https://docs.flutter.dev/ui/widgets"
target="_blank" rel="noopener noreferrer nofollow"
>Widget Catalog&lt;/a
>
에서 다양한 위젯을 제공합니다. &lt;a
class="underline-lsre"
href="https://docs.flutter.dev/ui/widgets/cupertino"
target="_blank" rel="noopener noreferrer nofollow"
>iOS 스타일의 Cupertino 위젯&lt;/a
>
과 &lt;a
class="underline-lsre"
href="https://docs.flutter.dev/ui/widgets/material"
target="_blank" rel="noopener noreferrer nofollow"
>Android 스타일의 위젯&lt;/a
>
을 활용하면 쉽게 네이티브 스타일을 구현할 수 있습니다.&lt;/p>
&lt;p>Command Palette에서 &lt;code>Flutter: Launch Emulator&lt;/code> 명령을 실행하여 에뮬레이터의 실행을 마친 뒤, &lt;code>lib/main.dart&lt;/code> 파일을 열고 &lt;code>main&lt;/code> 함수 상단에 &lt;code>Run&lt;/code>을 클릭하여 프로젝트를 실행합니다.&lt;/p>
&lt;p>첫 주차에선 다양한 위젯을 활용하여 로그인 페이지와 간단한 영화 리스트 페이지를 작성했습니다.&lt;/p>
&lt;h4 id="simple-login-page">Simple Login Page&lt;/h4>
&lt;iframe src="https://dartpad.dev/embed-flutter.html?id=9b26d4ef17f9b7df5f125ccd9f3b976a&amp;split=60&amp;theme=dark" style="width:100%; height: 500px;">&lt;/iframe>
&lt;ul>
&lt;li>사용자가 입력하기 위해 입력폼을 클릭했을 때 올라오는 키보드에 입력폼이 가려지는 문제가 있습니다. &lt;code>ListView&lt;/code>와 같이 scrollable한 위젯에선 발생하지 않는 문제지만 스크롤이 없을 때 발생합니다. 스크롤이 없는 단일 페이지에서 해당 문제가 발생할 시 &lt;code>SingleChildScrollView&lt;/code> 위젯을 사용해야 합니다.&lt;/li>
&lt;/ul>
&lt;h4 id="simple-movie-list">Simple Movie List&lt;/h4>
&lt;iframe src="https://dartpad.dev/embed-flutter.html?id=a92d7ac36eae072383b19b8438df0a15&amp;split=60&amp;theme=dark" style="width:100%; height: 500px;">&lt;/iframe>
&lt;ul>
&lt;li>&lt;code>ListView.builder&lt;/code> 위젯으로 리스트를 그릴 수 있습니다. &lt;code>ListView&lt;/code>를 &lt;code>Column&lt;/code>가 내부에서 사용할 때 &lt;code>Vertical viewport was given unbounded height.&lt;/code> 에러가 발생할 수 있는데, &lt;code>ListView&lt;/code>가 항상 최대 공간을 차지하려는 성질이 있어 높이가 무한대로 계산되는 문제가 발생하기 때문입니다. &lt;code>Expanded&lt;/code> 위젯으로 감싸서 문제를 해결할 수 있습니다.&lt;/li>
&lt;/ul></description></item><item><title>Refactoring for Performance (Canvas API)</title><link>https://jinyongp.dev/posts/d3js/4/</link><pubDate>Fri, Apr 22 14:18:15 2022 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/posts/d3js/4/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>저번 시리즈에서 필요한 기능은 전부 구현해보았지만, &lt;code>svg&lt;/code> 요소의 개수가 증가할수록 성능이 하락하는 모습을 확인했습니다. 50개의 &lt;code>nodes&lt;/code>에 대해 DevTools로 측정해본 결과, 렌더링 연산에 굉장히 많은 CPU, GPU 작업을 필요로 하고 있었습니다.&lt;/p>
&lt;p>&lt;img src="https://jinyongp.dev/image/d3-force-svg-50-performance.png" alt="SVG 50 Performance">&lt;/p>
&lt;p>이를 해결하기 위해서 &lt;a
class="underline-lsre"
href="https://developer.mozilla.org/ko/docs/Web/API/Canvas_API"
target="_blank" rel="noopener noreferrer nofollow"
>Canvas API&lt;/a
>
를 이용할 수 있습니다. Canvas API를 이용하면 d3-selection을 다룰 일은 거의 없습니다. 특히나 이번처럼 단순히 원과 선만 그리면 되는 작업에서는 그리기 더욱 쉽습니다. 대신 zoom과 drag는 구현 방식에 차이가 있어 다소 어려운 점도 있습니다. 그럼 바로 코드와 함께 저번 시간에 작성한 내용을 Canvas API로 리팩토링해보도록 하겠습니다.&lt;/p>
&lt;p>이번 시리즈에선 저번 시리즈에서 완성했던 &lt;code>network&lt;/code> class를 이용합니다.&lt;/p>
&lt;hr>
&lt;h2 id="drawing-canvas">Drawing Canvas&lt;/h2>
&lt;p>Canvas API는 말 그대로 &lt;a
class="underline-lsre"
href="https://ko.wikipedia.org/wiki/%EC%BA%94%EB%B2%84%EC%8A%A4"
target="_blank" rel="noopener noreferrer nofollow"
>캔버스&lt;/a
>
로 볼 수 있습니다. 그 위에 그림을 그리고 수정이 필요하다면 전부 지우고 다시 그리면 됩니다. 애니메이션이라면 매 프레임마다 지우고 그리기를 반복합니다. 이처럼 d3-force 또한 매 틱마다 반복하면 됩니다.&lt;/p>
&lt;blockquote>
&lt;p>d3.js에 대해서 중점적으로 다루는 프로젝트이므로 Canvas API에 대해 자세한 언급은 없습니다. 이에 대한 내용은 &lt;a
class="underline-lsre"
href="https://developer.mozilla.org/ko/docs/Web/API/Canvas_API"
target="_blank" rel="noopener noreferrer nofollow"
>공식 문서&lt;/a
>
를 참고 바랍니다.&lt;/p>
&lt;/blockquote>
&lt;p>Svg 방식에서는 &lt;code>svg&lt;/code> 요소를 생성하고 &lt;code>tick&lt;/code>에서 위치를 변경하는 방식으로 구현했습니다. Canvas 방식에선 그냥 그려주기만 하면 됩니다. 이를 위해 &lt;code>canvas&lt;/code>와 &lt;code>ctx&lt;/code>를 생성하고 &lt;code>tick&lt;/code> 이벤트를 등록해봅시다.&lt;/p>
&lt;pre>&lt;code class="language-js">class network {
constructor() {
this.canvas = d3.select(&amp;quot;body&amp;quot;)
.append(&amp;quot;canvas&amp;quot;)
.attr(&amp;quot;width&amp;quot;, this.size.w)
.attr(&amp;quot;height&amp;quot;, this.size.h)
.style(&amp;quot;display&amp;quot;, &amp;quot;block&amp;quot;);
this.ctx = this.canvas.node().getContext(&amp;quot;2d&amp;quot;);
this.nodeRadius = 8;
this.simulation = d3
.forceSimulation()
.on(&amp;quot;tick&amp;quot;, this.drawCanvas.bind(this));
}
drawCanvas() {
this.ctx.clearRect(0, 0, this.size.w, this.size.h);
this.ctx.save();
this.drawLinks();
this.drawNodes();
this.ctx.restore();
}
drawNodes() {
console.log(&amp;quot;Drawing Nodes!&amp;quot;);
}
drawLinks() {
console.log(&amp;quot;Drawing Links!&amp;quot;);
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>drawCanvas()&lt;/code>, &lt;code>drawNodes()&lt;/code> 그리고 &lt;code>drawLinks()&lt;/code> 함수 내에선 이제 d3-selection 없이 &lt;code>ctx&lt;/code>만으로 그림을 그립니다. 먼저 &lt;a
class="underline-lsre"
href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>ctx.clearRect()&lt;/code>&lt;/a
>
로 &lt;code>canvas&lt;/code>를 전부 지워줍니다. 그리고 &lt;code>drawNodes()&lt;/code>와 &lt;code>drawLinks()&lt;/code>를 호출하여 &lt;code>nodes&lt;/code>와 &lt;code>links&lt;/code>를 그려줍니다. 이 때, &lt;code>links&lt;/code>를 먼저 그려줘야만 &lt;code>nodes&lt;/code> 뒤에 그려집니다.&lt;/p>
&lt;p>&lt;code>links&lt;/code>는 굉장히 간단하게 그릴 수 있습니다. &lt;code>links&lt;/code>를 순회하면서 선을 그려줍니다.&lt;/p>
&lt;pre>&lt;code class="language-js">drawLinks() {
this.links.forEach(({ source, target }) =&amp;gt; {
this.ctx.beginPath();
this.ctx.moveTo(source.x, source.y);
this.ctx.lineTo(target.x, target.y);
this.ctx.stroke();
});
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>nodes&lt;/code>는 저번 시리즈에서 그렸던 것처럼 원 중앙에 &lt;code>id&lt;/code>가 위치하도록 작성합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">drawNodes() {
this.nodes.forEach(({ id, x, y }) =&amp;gt; {
this.ctx.beginPath();
this.ctx.arc(x, y, this.nodeRadius, 0, 2 * Math.PI);
this.ctx.lineWidth = 3;
this.ctx.strokeStyle = &amp;quot;blue&amp;quot;;
this.ctx.stroke();
this.ctx.fillStyle = &amp;quot;#fff&amp;quot;;
this.ctx.fill();
this.ctx.textAlign = &amp;quot;center&amp;quot;;
this.ctx.textBaseline = &amp;quot;middle&amp;quot;;
this.ctx.fillStyle = &amp;quot;#000&amp;quot;;
this.ctx.fillText(id, x, y);
});
}
&lt;/code>&lt;/pre>
&lt;p>d3-selection 없이 오로지 canvas만 이용하므로 쉽게 그릴 수 있습니다.&lt;/p>
&lt;hr>
&lt;h2 id="panning-and-zooming">Panning and Zooming&lt;/h2>
&lt;p>d3-zoom을 연결해서 화면을 이동하고 확대, 축소할 수 있도록 구현하겠습니다. Svg 방식에선 요소의 &lt;code>transform&lt;/code> 속성을 변경하여 직접 이동했다면, canvas 방식에선 전부 지우고 위치 이동 후 다시 그려주는 방식으로 구현합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">class network {
constructor() {
this.transform = d3.zoomIdentity;
this.zoom = d3.zoom()
.scaleExtent([0.1, 5])
.on('zoom', ({ transform }) =&amp;gt; {
this.transform = transform;
this.drawCanvas();
});
this.canvas.call(this.zoom);
}
drawCanvas() {
this.ctx.clearRect(0, 0, this.size.w, this.size.h);
this.ctx.save();
this.ctx.translate(this.transform.x, this.transform.y);
this.ctx.scale(this.transform.k, this.transform.k);
this.drawLinks();
this.drawNodes();
this.ctx.restore();
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom#zoomIdentity"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>d3.zoomIdentity&lt;/code>&lt;/a
>
는 &lt;code>{ k: 1, x: 0, y: 0 }&lt;/code>인 객체입니다. 이를 이용해 &lt;code>transform&lt;/code> 변수를 생성한 뒤, &lt;code>zoom&lt;/code> 이벤트로 얻은 &lt;code>transform&lt;/code>을 저장합니다. 그 후, &lt;code>drawCanvas()&lt;/code>를 호출하여 &lt;code>ctx.translate()&lt;/code>와 &lt;code>ctx.scale()&lt;/code> 함수를 이용해 변경한 위치에 그리도록 합니다.&lt;/p>
&lt;hr>
&lt;h2 id="focusing">Focusing&lt;/h2>
&lt;p>특정 요소를 클릭했을 때, 해당 요소를 포커싱하는 동작을 구현해보도록 하겠습니다. Canvas는 개별 요소를 선택할 수 없어서 요소에 커서 스타일을 적용하거나 클릭 이벤트를 적용하는데 어려움이 있습니다. 하지만, d3.js에서 제공하는 기능의 조합으로 쉽게 구현할 수 있습니다.&lt;/p>
&lt;p>개별 요소가 아닌 &lt;code>canvas&lt;/code> 자체에 클릭 이벤트를 등록합니다. 그렇게 얻은 &lt;code>event&lt;/code>로부터 클릭 좌표를 얻어 해당 위치에 존재하는 &lt;code>node&lt;/code>를 찾고, 해당 &lt;code>node&lt;/code>로 이동하고 확대합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">class network {
constructor() {
this.canvas.on(&amp;quot;click&amp;quot;, ({ x, y }) =&amp;gt; {
const node = this.findNode(x, y);
if (!node) return;
this.canvas
.transition()
.duration(500)
.call(this.zoom.translateTo, node.x, node.y)
.transition()
.call(this.zoom.scaleTo, 3);
});
}
findNode(x, y) {
const [ix, iy] = this.transform.invert([x, y]);
return this.simulation.find(ix, iy, this.nodeRadius);
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>canvas&lt;/code>에 &lt;code>click&lt;/code> 이벤트를 등록하여 &lt;code>event&lt;/code> 객체로부터 클릭한 위치인 &lt;code>x&lt;/code>, &lt;code>y&lt;/code> 좌표를 얻었습니다.&lt;/p>
&lt;p>&lt;code>findNode()&lt;/code> 메서드는 주어진 좌표에 &lt;code>node&lt;/code>가 존재하는지 확인하고 해당 &lt;code>node&lt;/code>를 반환합니다. &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom#transform_invert"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>transform.invert()&lt;/code>&lt;/a
>
는 주어진 절대 좌표에 현재 &lt;code>transform&lt;/code> 좌표값을 포함하여 계산하고 반환합니다. 이를 이용해야만 변경된 &lt;code>transform&lt;/code>을 적용한 좌표를 얻을 수 있습니다. &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#simulation_find"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>simulation.find()&lt;/code>&lt;/a
>
는 주어진 좌표에서 가장 가까이에 위치한 &lt;code>node&lt;/code>를 검색하여 반환합니다. &lt;code>node&lt;/code>의 반지름을 제공하여 해당 요소를 클릭해야만 &lt;code>node&lt;/code>를 찾을 수 있도록 하였습니다.&lt;/p>
&lt;p>&lt;code>node&lt;/code>를 찾았다면, &lt;code>zoom.translate&lt;/code>로 해당 &lt;code>node&lt;/code> 위치로 이동한 후 확대합니다.&lt;/p>
&lt;hr>
&lt;h2 id="dragging">Dragging&lt;/h2>
&lt;p>d3-drag를 연결하여 요소를 드래그하는 기능을 추가해보도록 하겠습니다. Svg 방식에서는 &lt;code>circles&lt;/code>에 drag를 부착하여 모든 요소에 대해 이벤트를 등록했습니다. Canvas 방식에서는 그런 방법이 불가능하기 때문에, &lt;code>canvas&lt;/code>에 등록하면서 동시에 클릭한 요소를 검색하는 &lt;code>subject&lt;/code>를 설정해야 합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">class network {
constructor() {
this.drag = d3
.drag()
.subject(({ x, y }) =&amp;gt; this.findNode(x, y))
.on(&amp;quot;start&amp;quot;, () =&amp;gt; {
this.canvas.style(&amp;quot;cursor&amp;quot;, &amp;quot;grabbing&amp;quot;);
this.simulation.alphaTarget(0.1).restart();
})
.on(&amp;quot;drag&amp;quot;, (event) =&amp;gt; {
const [x, y] = d3.pointer(event);
event.subject.fx = this.transform.invertX(x);
event.subject.fy = this.transform.invertY(y);
})
.on(&amp;quot;end&amp;quot;, ({ subject }) =&amp;gt; {
this.canvas.style(&amp;quot;cursor&amp;quot;, &amp;quot;default&amp;quot;);
this.simulation.alphaTarget(0);
subject.fx = null;
subject.fy = null;
});
this.canvas.call(this.drag);
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-drag#drag_subject"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>drag.subject()&lt;/code>&lt;/a
>
는 드래그하려는 주체 &lt;code>node&lt;/code>를 선택할 때 이용합니다. &lt;code>findNode()&lt;/code> 함수로 검색한 &lt;code>node&lt;/code>를 &lt;code>subject&lt;/code>로 설정합니다. 설정 이후, &lt;code>event&lt;/code> 객체에서 &lt;code>subject&lt;/code> property에 선택한 &lt;code>node&lt;/code>가 등록됩니다.&lt;/p>
&lt;p>Drag 이벤트에 등록한 함수는 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-drag#drag-events"
target="_blank" rel="noopener noreferrer nofollow"
>첫 번째 인자로 &lt;code>event&lt;/code> 객체&lt;/a
>
를 가집니다. Canvas 방식의 경우 개별 요소가 아닌 canvas에 등록되었기 때문에 &lt;code>event.x&lt;/code>와 &lt;code>event.y&lt;/code>의 값이 canvas 기준으로 생성됩니다. 클릭 위치 기반으로 좌표를 가져오기 위해 &lt;code>event.sourceEvent&lt;/code> 객체를 이용해야하므로 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-selection#pointer"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>d3.pointer()&lt;/code>를 이용&lt;/a
>
해 좌표를 가져옵니다. 그리고 &lt;code>transform&lt;/code>을 적용하여 &lt;code>subject&lt;/code>의 고정 좌표를 변경합니다.&lt;/p>
&lt;p>&lt;code>start&lt;/code>와 &lt;code>end&lt;/code> 이벤트에서 &lt;code>cursor&lt;/code> 스타일을 변경해주고 있습니다. 다만, 요소에 마우스를 올렸을 때도 스타일을 변경해주기 위해 &lt;code>pointermove&lt;/code> 이벤트를 추가해주었습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">class network {
constructor() {
this.canvas.on(&amp;quot;pointermove&amp;quot;, ({ x, y, buttons }) =&amp;gt; {
if (buttons) return;
const node = this.findNode(x, y);
this.canvas.style(&amp;quot;cursor&amp;quot;, node ? &amp;quot;pointer&amp;quot; : &amp;quot;default&amp;quot;);
});
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>event.buttons&lt;/code>는 현재 마우스를 클릭한 상태인지 판별하여 드래그 중일 땐 무시하도록 합니다. &lt;code>node&lt;/code>가 위치하는 곳에서만 &lt;code>pointer&lt;/code> 스타일을 갖도록 합니다.&lt;/p>
&lt;hr>
&lt;h2 id="impl">Impl.&lt;/h2>
&lt;p>저번 시리즈에서 작성한 코드를 Canvas로 작성해보았습니다. 이제 요소의 개수를 많이 추가하더라도 성능 하락의 모습을 보이지 않는 걸 확인할 수 있습니다.&lt;/p>
&lt;p class="codepen" data-height="600" data-default-tab="result" data-slug-hash="qBpwbbR" data-editable="true" data-user="jinyongp" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
&lt;span>See the Pen &lt;a href="https://codepen.io/jinyongp/pen/qBpwbbR">
D3 Force (w/ Canvas)&lt;/a> by Park, Jinyong (&lt;a href="https://codepen.io/jinyongp">@jinyongp&lt;/a>)
on &lt;a href="https://codepen.io">CodePen&lt;/a>.&lt;/span>
&lt;/p>
&lt;script async src="https://cpwebassets.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>성능 향상을 위해 여태까지 작업했던 내용을 Canvas API로 다시 작성해보았습니다. 단순히 그려보는 건 쉬웠지만 zoom과 drag 기능을 적용하는 건 여러 시행착오를 거쳐야했고 다양한 함수를 적용할 필요가 있어 svg 구현 방식보다 어려움을 겪었습니다.&lt;/p>
&lt;p>성능을 측정해보겠습니다. 50개의 &lt;code>node&lt;/code>를 테스트했던 svg 방식과 달리 200개의 &lt;code>node&lt;/code>를 생성하고 측정해봤음에도 굉장한 성능 향상을 보여줍니다. 대부분은 함수 실행 시간이고 랜더링 연산은 거의 영향을 미치지 않습니다.&lt;/p>
&lt;p>&lt;img src="https://jinyongp.dev/image/d3-force-canvas-200-performance.png" alt="Canvas 200 Performance">&lt;/p>
&lt;p>지금까지 d3-force, selection, zoom, drag 등 다양한 d3.js 모듈을 사용해보았고 Canvas API로 작성해보며 성능 향상 또한 진행해보았습니다. d3.js에는 이 외에도 무수히 많은 모듈이 있습니다. 데이터를 시각화하는데 무궁무궁진 잠재력을 지닌만큼 더 다양하게 활용해보며 여러 프로젝트에서 활용해보시면 좋을 듯 싶습니다. 긴 글 읽어주셔서 감사합니다.&lt;/p>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"
target="_blank" rel="noopener noreferrer nofollow"
>MDN - CanvasRenderingContext2D&lt;/a
>
&lt;/li>
&lt;/ul></description></item><item><title>Panning, Zooming and Dragging</title><link>https://jinyongp.dev/posts/d3js/3/</link><pubDate>Thu, Apr 21 11:16:27 2022 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/posts/d3js/3/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom"
target="_blank" rel="noopener noreferrer nofollow"
>d3-zoom&lt;/a
>
과 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-drag"
target="_blank" rel="noopener noreferrer nofollow"
>d3-drag&lt;/a
>
는 사용자가 마우스 클릭 혹은 터치로 화면을 제어하거나 요소를 이동하는 기능을 제공합니다.&lt;/p>
&lt;p>이번 시리즈 또한 마찬가지로 저번 시리즈에 구현했던 코드에 d3-zoom과 d3-drag를 결합하는 걸 목표로 하여 그에 필요한 부분만 다루도록 하겠습니다.&lt;/p>
&lt;hr>
&lt;h2 id="d3-zoom">d3-zoom&lt;/h2>
&lt;p>d3-zoom은 사용자가 화면을 드래그 혹은 스크롤하여 현재 보는 범위를 이동, 확대, 축소하는 기능을 제공합니다. 혹은, 특정 요소를 선택했을 때 그 위치로 이동하면서 포커스하는 효과를 줄 수도 있습니다.&lt;/p>
&lt;h3 id="panning-and-zooming">Panning and Zooming&lt;/h3>
&lt;p>d3-zoom은 d3-selection과 연계하여 구현합니다. &lt;code>Selection&lt;/code> 객체에 zoom 기능을 제공하기 위해 &lt;code>d3.zoom()&lt;/code> 함수를 호출하여 전달합니다. 저번 시리즈에서 생성한 &lt;code>root&lt;/code> 요소를 가져와 zoom 기능을 추가해보겠습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const zoom = d3
.zoom()
.on('zoom', (event) =&amp;gt; {
console.log('Zoom and Drag!');
});
root.call(zoom);
&lt;/code>&lt;/pre>
&lt;p>&lt;code>d3.zoom()&lt;/code> 함수는 &lt;code>Selection&lt;/code> 객체를 인자로 받는 함수를 생성하여 반환합니다. &lt;code>root.call(zoom)&lt;/code>을 호출함으로써 인자로 받은 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom/blob/1bccd3fd56ea24e9658bd7e7c24e9b89410c8967/src/zoom.js#L72-L83"
target="_blank" rel="noopener noreferrer nofollow"
>객체에 여러 property와 event를 등록&lt;/a
>
하게 됩니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-selection#selection_call"
target="_blank" rel="noopener noreferrer nofollow"
>selection.call()&lt;/a
>
은 &lt;code>Selection&lt;/code> 객체를 인자로 받는 함수를 인자로 받습니다. &lt;code>root.call(zoom)&lt;/code>은 다음 코드와 동일합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">zoom(root);
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;p>&lt;code>root&lt;/code> 요소를 드래그하거나 스크롤을 해보면 이벤트에 등록한 함수가 실행됩니다. &lt;code>zoom&lt;/code> 이벤트에 등록할 함수를 작성하여 요소를 이동시켜봅시다.&lt;/p>
&lt;p>전달한 함수는 &lt;code>event&lt;/code> 객체를 매개변수로 가집니다. 클릭 이동인지 스크롤인지에 따라 종류가 달라집니다.&lt;/p>
&lt;pre>&lt;code class="language-js">// MouseEvent
sourceEvent: MouseEvent {...}
target: ƒ y(t)
transform: Jx {k: x.xx, x: x.xx, y: x.xx}
type: &amp;quot;zoom&amp;quot;
// WheelEvent
sourceEvent: WheelEvent {...}
target: ƒ y(t)
transform: Jx {k: x.xx, x: x.xx, y: x.xx}
type: &amp;quot;zoom&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>이 중에서 scale factor인 &lt;code>k&lt;/code> 와 translation 값인 &lt;code>x&lt;/code>, &lt;code>y&lt;/code>를 얻을 수 있는 &lt;code>transform&lt;/code> 객체를 이용합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">.on('zoom', ({ transform }) =&amp;gt; {
nodeGroup.attr('transform', transform);
linkGroup.attr('transform', transform);
});
&lt;/code>&lt;/pre>
&lt;p>저번 시리즈에서 생성한 &lt;code>nodeGroup&lt;/code>과 &lt;code>linkGroup&lt;/code>은 &lt;code>svg&lt;/code> 요소를 가지는 &lt;code>Selection&lt;/code> 객체로 &lt;code>transform&lt;/code> 속성을 변경하여 위치와 크기를 조절할 수 있습니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>transform&lt;/code>은 객체인데 그대로 전달할 수 있는 이유는 적용될 때 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom#transform_toString"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>transform.toString()&lt;/code>함수가 호출되어 &lt;code>&amp;quot;translate(x,y) scale(k)&amp;quot;&lt;/code> 형태의 문자열로 변환&lt;/a
>
되기 때문입니다.&lt;/p>
&lt;/blockquote>
&lt;p>화면을 드래그하여 이동하고 스크롤하여 확대, 축소할 수 있습니다.&lt;/p>
&lt;h3 id="focusing">Focusing&lt;/h3>
&lt;p>그럼 특정 요소를 클릭했을 때 해당 요소를 포커스하는 동작에 대해 구현해보겠습니다. 일단 &lt;code>Selection&lt;/code> 객체에 이벤트를 등록하기 위해선 &lt;code>selection.on()&lt;/code> 메서드를 호출합니다. 저번 시리즈에서 생성한 &lt;code>circles&lt;/code>를 가져오겠습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">circles.on('click', (event, node) =&amp;gt; {
console.log('Click!');
});
&lt;/code>&lt;/pre>
&lt;p>&lt;code>click&lt;/code> 이벤트에 등록한 함수는 &lt;code>event&lt;/code>와 &lt;code>node&lt;/code> 객체를 매개변수로 가집니다. &lt;code>node&lt;/code>의 현재 위치 &lt;code>x&lt;/code>, &lt;code>y&lt;/code> 좌표로 이동 및 확대해야 하므로 이를 이용합니다.&lt;/p>
&lt;p>사용자의 조작이 아닌 코드를 통해 특정 좌표로 이동하고 확대하기 위해선 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom#zoom_translateTo"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>zoom.translateTo&lt;/code>&lt;/a
>
와 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom#zoom_scaleTo"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>zoom.scaleTo&lt;/code>&lt;/a
>
함수를 이용합니다. 해당 함수는 첫 번째 인자로 &lt;code>Selection&lt;/code> 객체를 전달받으므로 &lt;code>selection.call()&lt;/code> 함수로 호출할 수 있습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">circles.on('click', (_, { x, y }) =&amp;gt; {
root
.transition()
.duration(500)
.call(zoom.translateTo, x, y)
.transition()
.call(zoom.scaleTo, 3);
});
&lt;/code>&lt;/pre>
&lt;p>&lt;code>circles&lt;/code> 요소를 클릭하면 클릭한 &lt;code>circle&lt;/code>의 &lt;code>x&lt;/code>, &lt;code>y&lt;/code> 좌표를 가져옵니다. 그리고 &lt;code>zoom.translateTo&lt;/code>와 &lt;code>zoom.scaleTo&lt;/code>가 &lt;code>root&lt;/code> 요소의 zoom 상태를 변경합니다. &lt;code>transition&lt;/code>과 &lt;code>duration&lt;/code>은 zoom이 이동할 때 transition 효과를 주어 보다 자연스러운 움직임을 제공합니다.&lt;/p>
&lt;hr>
&lt;h2 id="d3-drag">d3-drag&lt;/h2>
&lt;p>d3-drag는 요소를 클릭하여 드래그하는 기능을 제공합니다.&lt;/p>
&lt;h3 id="dragging">Dragging&lt;/h3>
&lt;p>d3-drag 또한 d3-selection에 기능을 제공합니다. &lt;code>d3.drag()&lt;/code> 함수는 &lt;code>Selection&lt;/code> 객체를 인자로 받는 함수를 생성하여 반환합니다. 추가로, 드래그하기 위해서 필요한 세 가지 이벤트를 등록해야 합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const drag = d3
.drag()
.on(&amp;quot;start&amp;quot;, (event, node) =&amp;gt; {
console.log('Drag Start!');
})
.on(&amp;quot;drag&amp;quot;, (event, node) =&amp;gt; {
console.log('Dragging!');
})
.on(&amp;quot;end&amp;quot;, (event, node) =&amp;gt; {
console.log('Drag End!');
});
circles.call(drag);
&lt;/code>&lt;/pre>
&lt;p>요소를 클릭하면 &lt;code>start&lt;/code> 이벤트가 발생하고, 클릭 후 드래그하면 &lt;code>drag&lt;/code> 이벤트 그리고 클릭을 떼면 &lt;code>end&lt;/code> 이벤트가 발생합니다. 이벤트에 등록한 모든 함수는 클릭 이벤트 객체와 클릭한 요소의 정보를 매개변수로 가집니다.&lt;/p>
&lt;p>요소를 클릭하여 드래그할 때 simulation은 계속 실행 중인 상태여야 합니다. d3-force 시리즈에서 언급한 내용으로 simulation을 종료하지 않고 계속 실행하려면 &lt;code>alphaTarget&lt;/code>을 이용해야 합니다.&lt;/p>
&lt;p>또한, 요소가 다른 요소와 상관없이 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#simulation_nodes"
target="_blank" rel="noopener noreferrer nofollow"
>특정 고정 좌표에 위치하도록 하려면 &lt;code>fx&lt;/code>와 &lt;code>fy&lt;/code> 값을 설정&lt;/a
>
해야 합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const drag = d3
.drag()
.on('start', (event, node) =&amp;gt; {
nodeGroup.style('cursor', 'grabbing');
simulation.alphaTarget(0.1).restart();
})
.on('drag', (event, node) =&amp;gt; {
node.fx = event.x;
node.fy = event.y;
})
.on('end', (event, node) =&amp;gt; {
nodeGroup.style('cursor', 'grab');
simulation.alphaTarget(0);
node.fx = null;
node.fy = null;
});
circles.call(drag);
&lt;/code>&lt;/pre>
&lt;p>클릭할 때 &lt;code>alphaTarget&lt;/code>을 &lt;code>alphaMin&lt;/code>보다 크게 설정하여 simulation이 절대 종료되지 않도록 합니다. &lt;code>alphaTarget&lt;/code> 값이 클수록 다른 요소의 움직임이 커집니다. 클릭을 종료하면 다시 되돌려놓습니다.&lt;/p>
&lt;p>클릭하여 드래그를 시작하면 &lt;code>fx&lt;/code>와 &lt;code>fy&lt;/code> 값을 현재 마우스의 위치로 설정합니다. 클릭을 종료하면 &lt;code>null&lt;/code>로 설정하여 고정 위치를 제거합니다.&lt;/p>
&lt;hr>
&lt;h2 id="impl">Impl.&lt;/h2>
&lt;p>d3-zoom과 d3-drag를 추가해보았습니다. &lt;code>Network&lt;/code> class를 작성하여 코드를 정리했고 실시간으로 &lt;code>alpha&lt;/code>와 &lt;code>zoom&lt;/code> 상태를 확인하고 제어할 수 있도록 구현하였습니다. &lt;code>nodes&lt;/code>와 &lt;code>links&lt;/code>를 추가할 수 있도록 구현하였습니다. 비어있는 채로 &lt;code>ADD&lt;/code>를 클릭하면 새로운 요소가 임의의 요소에 연결됩니다. 그리고 &lt;code>node&lt;/code>의 아이디를 DOM에 그려 &lt;code>node&lt;/code>의 데이터를 어떻게 DOM에 적용할 수 있는지 보여줬습니다.&lt;/p>
&lt;p class="codepen" data-height="600" data-default-tab="result" data-slug-hash="mdpoWxa" data-user="jinyongp" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
&lt;span>See the Pen &lt;a href="https://codepen.io/jinyongp/pen/mdpoWxa">
D3 Force, Zoom, Drag (w/ SVG)&lt;/a> by Park, Jinyong (&lt;a href="https://codepen.io/jinyongp">@jinyongp&lt;/a>)
on &lt;a href="https://codepen.io">CodePen&lt;/a>.&lt;/span>
&lt;/p>
&lt;script async src="https://cpwebassets.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>d3-zoom과 d3-drag를 기존 프로젝트에 연결하는 코드를 작성해보면서 개념과 구현 방법에 대해 알아보았습니다. 여기서 사용해본 기능 말고도 d3는 정말 많은 기능을 제공합니다. 공식 문서에 예시가 살짝 아쉽긴 하지만, 직접 사용해보면서 그 유틸성을 확인해보았으면 합니다.&lt;/p>
&lt;p>&lt;code>ADD&lt;/code> 버튼을 눌러 계속 요소를 추가하다보면 점점 프레임이 떨어지면서 성능이 하락하는 모습을 볼 수 있습니다. 이 문제는 HTML5 Canvas API가 해결할 수 있습니다. 허나, 이 방법도 그리기엔 쉬울지 몰라도 오늘 적용한 zoom과 drag 기능을 추가하는데엔 어려움이 있습니다. 다음 시리즈는 지금까지 구현한 내용을 Canvas API로 리팩토링하면서 전부 알아보도록 하겠습니다.&lt;/p>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-zoom"
target="_blank" rel="noopener noreferrer nofollow"
>d3-zoom&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-drag"
target="_blank" rel="noopener noreferrer nofollow"
>d3-drag&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-transition"
target="_blank" rel="noopener noreferrer nofollow"
>d3-transition&lt;/a
>
&lt;/li>
&lt;/ul></description></item><item><title>Data Driven Transformation of DOM</title><link>https://jinyongp.dev/posts/d3js/2/</link><pubDate>Sat, Apr 16 02:47:11 2022 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/posts/d3js/2/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-selection"
target="_blank" rel="noopener noreferrer nofollow"
>d3-selection&lt;/a
>
은 데이터를 기반으로 DOM을 조작할 수 있는 다양한 기능을 제공합니다.&lt;/p>
&lt;p>이번 시리즈는 d3-force와 연계하여 Github Follower, Following 관계망 그리기를 목표로 하고 있으므로 구현 과정에서 필요한 부분에 대해서만 다루도록 하겠습니다.&lt;/p>
&lt;p>들어가기 전에 &lt;code>Selection&lt;/code> 객체에 대해 알아봅시다. d3-selection으로 선택한 요소는 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-selection/blob/main/src/selection/index.js"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>groups&lt;/code>와 &lt;code>parents&lt;/code> property를 갖는 &lt;code>Selection&lt;/code> 객체&lt;/a
>
를 생성합니다. &lt;code>Selection&lt;/code> 객체는 선택한 요소를 제어할 수 있는 다양한 메서드를 제공합니다.&lt;/p>
&lt;ul>
&lt;li>요소 선택: selection, select, selectAll, selectChild, selectChildren, filter, merge&lt;/li>
&lt;li>요소 변경: attr, classed, style, property, text, html, append, insert, remove, clone, sort, order, raise, lower&lt;/li>
&lt;li>데이터 연결: data, join, enter, exit, datum&lt;/li>
&lt;li>이벤트 핸들링: on, dispatch&lt;/li>
&lt;li>제어 흐름: each, call, empty, nodes, size, [Symbol.iterator]()&lt;/li>
&lt;/ul>
&lt;p>d3-selection을 이용하여 선택한 요소에 데이터를 연결하고 그 데이터를 기반으로 요소를 제어할 수 있습니다.&lt;/p>
&lt;p>이제 코드와 함께 d3-selection을 이용하여 간단한 그래프를 그려보겠습니다.&lt;/p>
&lt;hr>
&lt;h2 id="creating-and-editing">Creating and Editing&lt;/h2>
&lt;p>관계망에 사용할 &lt;code>nodes&lt;/code>와 &lt;code>links&lt;/code>를 브라우저에 그려주기 위해 d3-selection으로 &lt;code>svg&lt;/code>를 생성하고 크기를 설정해줍니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const root = d3
.select('body') // === d3.select(document.body)
.append('svg')
.attr('width', '100%')
.attr('height', '100%')
.style('display', 'block');
&lt;/code>&lt;/pre>
&lt;p>&lt;code>body&lt;/code> 요소를 선택하고 하위에 &lt;code>svg&lt;/code> 요소를 추가했습니다. 그리고 &lt;code>attr&lt;/code> 메서드와 &lt;code>style&lt;/code> 메서드로 &lt;code>svg&lt;/code>의 속성과 스타일을 지정했습니다. &lt;code>root&lt;/code>엔 &lt;code>svg&lt;/code> 요소를 담고 있는 &lt;code>Selection&lt;/code> 객체가 할당됩니다.&lt;/p>
&lt;p>&lt;code>root&lt;/code> 아래 &lt;code>links&lt;/code>와 &lt;code>nodes&lt;/code>를 각각 묶을 &lt;code>g&lt;/code> 요소를 생성합니다. (&lt;code>linkGroup&lt;/code>을 먼저 생성해야 뒤에 배치됩니다.)&lt;/p>
&lt;pre>&lt;code class="language-js">const linkGroup = root.append('g').attr('id', 'links');
const nodeGroup = root.append('g').attr('id', 'nodes');
&lt;/code>&lt;/pre>
&lt;p>&lt;code>id&lt;/code>는 별 다른 역할 없이 식별을 위해 추가해주었습니다.&lt;/p>
&lt;hr>
&lt;h2 id="joining-data">Joining Data&lt;/h2>
&lt;p>이제 DOM 요소에 데이터를 연결해봅시다. &lt;code>nodeGroup&lt;/code> 아래 &lt;code>circle&lt;/code>을 배치하고 &lt;code>nodes&lt;/code> 데이터를 연결합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const circles = nodeGroup
.selectAll('circle')
.data(nodes)
.join('circle')
.attr('r', 5)
.attr('fill', 'blue');
&lt;/code>&lt;/pre>
&lt;p>얼핏 보면 말이 되는 듯하지만 아직 생성도 하지 않은 &lt;code>circle&lt;/code>을 왜 선택하고 있는지 의문이 생깁니다. 각 단계가 생성하는 &lt;code>Selection&lt;/code> 객체를 보고 흐름을 이해해봅시다.&lt;/p>
&lt;p>&lt;code>nodeGroup.selectAll('circle')&lt;/code>은 당연히 빈 &lt;code>Selection&lt;/code> 객체를 반환합니다.&lt;/p>
&lt;blockquote>
&lt;p>💡 당연히 비어있는 &lt;code>Selection&lt;/code> 객체를 받을건데 왜 &lt;code>selectAll&lt;/code>을 쓸까요?&lt;/p>
&lt;p>이후에 &lt;code>nodes&lt;/code>를 추가해야 할 상황이 생긴다면, 기존에 생성되었던 &lt;code>circle&lt;/code> 요소와 &lt;code>nodes&lt;/code>를 비교하여 추가된 &lt;code>node&lt;/code>의 개수만큼 &lt;code>circle&lt;/code> 요소를 추가합니다. 즉, 비교를 위해 선택하는 요소와 생성하는 요소는 동일해야 합니다.&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code class="language-js">_groups: [NodeList(0)]
_parents: [g#nodes]
&lt;/code>&lt;/pre>
&lt;p>&lt;code>.data(nodes)&lt;/code>는 빈 &lt;code>Selection&lt;/code> 객체에 &lt;code>nodes&lt;/code> 배열의 길이만큼 연결합니다. &lt;code>jt&lt;/code> 객체는 &lt;code>__data__&lt;/code> property에 &lt;code>node&lt;/code> 정보를 갖고 있습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">_enter: [Array(5)]
0: (5) [jt, jt, jt, jt, jt]
_exit: [Array(0)]
0: []
_groups: [Array(5)]
0: (5) [empty × 5]
_parents: [g#nodes]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-js">_enter: Array(1)
0: Array(5)
0: jt {...}
1: jt {...}
2: jt {...}
3: jt {...}
4: jt
namespaceURI: &amp;quot;http://www.w3.org/2000/svg&amp;quot;
ownerDocument: document
__data__: {id: 5, index: 4, x:...}
_exit: [Array(0)]
_groups: [Array(5)]
_parents: [g#nodes]
&lt;/code>&lt;/pre>
&lt;p>&lt;code>.join('circle')&lt;/code>은 &lt;code>.enter().append('circle')&lt;/code>과 동일한 단축 표현입니다. &lt;code>.enter()&lt;/code>까지 실행한 결과는 아래와 같습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">_groups: Array(1)
0: (5) [jt, jt, jt, jt, jt]
_parents: [g#nodes]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-js">_groups: Array(1)
0: Array(5)
0: jt {ownerDocument: document, namespaceURI: 'http://www.w3.org/2000/svg', ...}
1: jt {ownerDocument: document, namespaceURI: 'http://www.w3.org/2000/svg', ...}
2: jt {ownerDocument: document, namespaceURI: 'http://www.w3.org/2000/svg', ...}
3: jt {ownerDocument: document, namespaceURI: 'http://www.w3.org/2000/svg', ...}
4: jt
namespaceURI: &amp;quot;http://www.w3.org/2000/svg&amp;quot;
ownerDocument: document
__data__: {id: 5, index: 4, x: ...}
...
_parents: [g#nodes]
&lt;/code>&lt;/pre>
&lt;p>&lt;code>enter().append('circle')&lt;/code>까지 실행한 결과는 아래와 같습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">_groups: Array(1)
0: Array(5)
0: circle
1: circle
2: circle
3: circle
4: circle
__data__: {id: 5, index: 4, x:...}
...
_parents: [g#nodes]
&lt;/code>&lt;/pre>
&lt;p>&lt;code>circle&lt;/code> 요소가 연결되었고 &lt;code>circle&lt;/code> 내부에 &lt;code>__data__&lt;/code>가 결합되었습니다.&lt;/p>
&lt;hr>
&lt;h2 id="impl">Impl.&lt;/h2>
&lt;p>&lt;code>ticked&lt;/code> 함수 내부에서 DOM 요소와 결합한 &lt;code>node&lt;/code> 객체의 &lt;code>x&lt;/code>, &lt;code>y&lt;/code> 좌표 데이터를 이용해 요소를 화면 상에 그려보았습니다.&lt;/p>
&lt;p class="codepen" data-height="600" data-default-tab="result" data-slug-hash="MWrxgPB" data-user="jinyongp" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
&lt;span>See the Pen &lt;a href="https://codepen.io/jinyongp/pen/MWrxgPB">
D3 Force (w/ SVG)&lt;/a> by Park, Jinyong (&lt;a href="https://codepen.io/jinyongp">@jinyongp&lt;/a>)
on &lt;a href="https://codepen.io">CodePen&lt;/a>.&lt;/span>
&lt;/p>
&lt;script async src="https://cpwebassets.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>d3-selection의 개념과 데이터 결합 방법과 흐름에 대해 살펴보았습니다. 저번과 달리 많은 개념에 대해 알아보진 않았지만, 요소를 선택하고 속성을 변경하고 데이터를 결합하는 정말 필요한 내용만 다루면서 d3-force와 연동하여 간단한 그래프를 그려볼 수 있었습니다.&lt;/p>
&lt;p>&lt;code>node&lt;/code>의 데이터가 많아질수록 d3-selection을 더욱 적극적으로 이용할 예정이므로, 그 때를 위해 이번엔 이 정도로 하고 다음 시리즈에선 d3-zoom과 d3-drag를 이용하여 상호작용하는 방법에 대해 알아보겠습니다.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-selection"
target="_blank" rel="noopener noreferrer nofollow"
>d3-selection&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://bost.ocks.org/mike/join/"
target="_blank" rel="noopener noreferrer nofollow"
>Thinking with Joins&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://lucidar.me/en/d3.js/part-07-data-binding"
target="_blank" rel="noopener noreferrer nofollow"
>D3.js Tutorial - Data Binding&lt;/a
>
&lt;/li>
&lt;/ul></description></item><item><title>D3.js Network Simulation In Depth</title><link>https://jinyongp.dev/series/d3js/1/</link><pubDate>Thu, Apr 14 14:31:09 2022 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/series/d3js/1/</guid><description>&lt;p>원티드 프리온보딩에서 주어진 과제 중 하나인 &lt;a
class="underline-lsre"
href="https://github.com/Pre-Onboarding-FE-Team07/wanted-codestates-project-7-7-2"
target="_blank" rel="noopener noreferrer nofollow"
>D3.js를 이용한 Github Starred Repo 관계망 그리기 프로젝트&lt;/a
>
를 진행하면서 d3.js에 큰 흥미를 가지게 되었습니다. 처음 다뤄보는 시각화 라이브러리이라 기능 하나를 추가할 때마다 많은 자료와 문서를 찾아봐야 했습니다. 어찌어찌하긴 해내긴 했지만 코드와 동작을 보며 느껴지는 부족함에 아쉬움이 생겼습니다. 아무래도 짧은 시간 내에 구현해내느라 이해하는데 어려움이 있었기 때문에, 그 어려움을 극복하고자 문서를 톺아보며 살펴보고 정리해보고자 합니다.&lt;/p>
&lt;p>사용하는 라이브러리는 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3"
target="_blank" rel="noopener noreferrer nofollow"
>d3.js&lt;/a
>
입니다. d3가 가진 수많은 라이브러리 중에서도 &lt;code>d3-force&lt;/code>, &lt;code>d3-zoom&lt;/code>, &lt;code>d3-selection&lt;/code>, &lt;code>d3-drag&lt;/code> 등 추가로 필요한 모듈이라면 전부 활용해볼 예정이고 성능 향상을 위해 Canvas API로 구현해보려고 합니다.&lt;/p></description></item><item><title>Simulating Physical Forces</title><link>https://jinyongp.dev/posts/d3js/1/</link><pubDate>Thu, Apr 14 14:20:46 2022 +0000</pubDate><author>dev.jinyongp@gmail.com (Jinyong Park)</author><guid>https://jinyongp.dev/posts/d3js/1/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force"
target="_blank" rel="noopener noreferrer nofollow"
>d3-force&lt;/a
>
는 입자(&lt;code>nodes&lt;/code>) 간에 가해지는 물리적 힘(forces)을 simulation하여 입자의 좌표값을 계산하고 제공합니다.&lt;/p>
&lt;p>코드와 함께 &lt;a
class="underline-lsre"
href="#simulation"
>Simulation&lt;/a
>
과 &lt;a
class="underline-lsre"
href="#forces"
>Forces&lt;/a
>
에 대해 이해해봅시다.&lt;/p>
&lt;hr>
&lt;h2 id="simulationhttpsgithubcomd3d3-forcesimulation">&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#simulation"
target="_blank" rel="noopener noreferrer nofollow"
>Simulation&lt;/a
>
&lt;/h2>
&lt;p>Simulation은 &lt;code>nodes&lt;/code>에 가해지는 물리적 힘을 계산합니다. &lt;code>d3.forceSimulation()&lt;/code> 함수로 simulation을 생성합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const simulation = d3.forceSimulation();
&lt;/code>&lt;/pre>
&lt;p>Simulation에 그래프의 정점 목록인 &lt;code>nodes&lt;/code>와 간선 목록인 &lt;code>links&lt;/code>를 등록할 수 있습니다.&lt;/p>
&lt;h3 id="nodes">Nodes&lt;/h3>
&lt;p>먼저 &lt;code>nodes&lt;/code>에 대해 알아봅시다. Simulation은 입력한 &lt;code>node&lt;/code> 객체에 계산 결과값을 추가합니다. &lt;code>nodes&lt;/code> 배열에서 각 &lt;code>node&lt;/code>를 인덱스로 관리해도 되지만, 보기 어려우므로 고유 식별자 &lt;code>id&lt;/code>를 추가하겠습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const nodes = [...Array(5)].map((_, i) =&amp;gt; ({ id: i + 1 }));
// [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }]
simulation.nodes(nodes);
// nodes [
// {
// id: 1,
// index: 0,
// vx: x.xx,
// vy: x.xx,
// x: x.xx,
// y: x.xx,
// }
// , ...
// ]
&lt;/code>&lt;/pre>
&lt;p>Simulation은 &lt;code>node&lt;/code>에 &lt;code>index&lt;/code>와 함께 좌표값인 &lt;code>x&lt;/code>, &lt;code>y&lt;/code> 그리고 속도값인 &lt;code>vx&lt;/code>, &lt;code>vy&lt;/code>를 추가합니다. 원본 &lt;code>node&lt;/code> 객체 자체를 수정해야하므로 &lt;a
class="underline-lsre"
href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions"
target="_blank" rel="noopener noreferrer nofollow"
>non-extensible한 객체&lt;/a
>
는 사용할 수 없습니다. 만약 불변성 유지가 필요하다면 객체를 복사하여 전달해야 합니다.&lt;/p>
&lt;h3 id="links">Links&lt;/h3>
&lt;p>그럼 이제 &lt;code>links&lt;/code>를 등록해봅시다. d3-force에서 &lt;code>link&lt;/code> 객체는 방향성을 지닌 간선이므로 &lt;code>source&lt;/code>와 &lt;code>target&lt;/code>을 가진 객체로 선언합니다. &lt;code>nodes&lt;/code>와 달리 각 property는 객체가 아닌 &lt;code>node&lt;/code>를 식별할 &lt;code>id&lt;/code>를 갖습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const links = [
{ source: 1, target: 4 },
{ source: 3, target: 4 },
{ source: 2, target: 5 },
{ source: 4, target: 1 },
{ source: 5, target: 4 },
];
simulation.force('link', d3.forceLink(links).id(({ id }) =&amp;gt; id));
// links [
// {
// index: 1,
// source: {
// id: 3
// index: 2
// vx: x.xx,
// vy: x.xx,
// x: x.xx,
// y: x.xx,
// },
// target: {
// ...
// },
// }, ...
// ]
&lt;/code>&lt;/pre>
&lt;p>나중에 &lt;a
class="underline-lsre"
href="#forces"
>Forces&lt;/a
>
챕터에서 다시 만나겠지만, &lt;code>links&lt;/code>는 &lt;code>nodes&lt;/code>에 작용할 힘을 제공하므로 &lt;code>force&lt;/code>로 추가합니다. &lt;code>links&lt;/code>를 simulation에 추가하면 &lt;code>source&lt;/code>, &lt;code>target&lt;/code>에 설정된 &lt;code>id&lt;/code>를 동일한 &lt;code>id&lt;/code>를 가진 &lt;code>node&lt;/code> 객체로 대체합니다. (코드에 나와 있듯 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#link_id"
target="_blank" rel="noopener noreferrer nofollow"
>link.id()&lt;/a
>
함수로 지정해야 합니다.)&lt;/p>
&lt;h3 id="tick">Tick&lt;/h3>
&lt;p>Simulation에 &lt;code>nodes&lt;/code>와 &lt;code>links&lt;/code>를 등록해봤습니다. &lt;code>tick&lt;/code> 이벤트에 핸들러 함수를 등록하여 매 &lt;code>tick&lt;/code>마다 실행할 코드를 작성할 수 있습니다. Simulation은 생성 직후 곧바로 실행됩니다. 필요하다면 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#simulation_stop"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>simulation.stop()&lt;/code>&lt;/a
>
함수로 정지하거나 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#simulation_restart"
target="_blank" rel="noopener noreferrer nofollow"
>&lt;code>simulation.restart()&lt;/code>&lt;/a
>
로 재시작할 수 있습니다.&lt;/p>
&lt;p>&lt;code>tick&lt;/code> 이벤트 핸들러를 등록하여 &lt;code>node&lt;/code>에 저장된 결과값을 확인해봅시다.&lt;/p>
&lt;pre>&lt;code class="language-js">simulation.on('tick', () =&amp;gt; {
console.log(nodes[0]);
});
// 첫 번째 tick: {id: 1, index: 0, x: 5.826695986913618, y: -4.292216192303559, vy: -4.292216192303559, …}
// 두 번째 tick: {id: 1, index: 0, x: 4.820993020602418, y: -8.04960224695047, vy: -3.7573860546469113, …}
// 세 번째 tick: {id: 1, index: 0, x: 4.188865598751164, y: -10.465829270778734, vy: -2.4162270238282635, …}
// 네 번째 tick: {id: 1, index: 0, x: 3.823314491169919, y: -11.82585404923582, vy: -1.3600247784570867, …}
// ...
&lt;/code>&lt;/pre>
&lt;p>Simulation은 &lt;code>tick&lt;/code> 단위마다 좌표값을 계산합니다. 우린 simulation에 의해 &lt;code>tick&lt;/code>마다 계산된 절대 좌표값(x, y)를 화면에 그려주기만 하면 됩니다. 그리는 건 나중에 d3-selection과 함께 알아보겠습니다.&lt;/p>
&lt;h3 id="alpha">Alpha&lt;/h3>
&lt;p>Simulation을 얼마나 진행할 지 결정하는 &lt;code>alpha&lt;/code>, &lt;code>alphaMin&lt;/code>, &lt;code>alphaDecay&lt;/code>, &lt;code>alphaTarget&lt;/code>, &lt;code>velocityDecay&lt;/code> 속성에 대해 알아보겠습니다. 문서에 주어진 &lt;code>alpha&lt;/code>의 정의는 설명도 부실하고 이해하기 꽤 어려우니 &lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force/blob/main/src/simulation.js"
target="_blank" rel="noopener noreferrer nofollow"
>구현 코드&lt;/a
>
를 보며 동작 방식을 알아봅시다. 주어진 속성의 초기값은 다음과 같습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">var simulation,
alpha = 1,
alphaMin = 0.001,
alphaDecay = 1 - Math.pow(alphaMin, 1 / 300) // 0.02276277904418933
alphaTarget = 0,
velocityDecay = 0.6,
// ...
&lt;/code>&lt;/pre>
&lt;p>&lt;code>alpha&lt;/code>는 매 &lt;code>tick&lt;/code>마다 &lt;code>alpha += (alphaTarget - alpha) * alphaDecay&lt;/code>로 계산되어 감소합니다. 또한, 매 &lt;code>tick&lt;/code>마다 &lt;code>alpha&lt;/code>와 &lt;code>alphaMin&lt;/code>를 비교합니다. &lt;code>alpha&lt;/code>가 &lt;code>alphaMin&lt;/code>보다 작아질 때까지 simulation을 실행합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">simulation.on('tick', () =&amp;gt; {
console.log(simulation.alpha());
// 001: 0.9772372209558107 = 1 + (0 - 1) * 0.02276277904418933;
// 002: 0.9549925860214359 = alpha + (alphaTarget - alpha) * alphaDecay
// ...
// 300: 0.0009999999999999966 종료: alphaMin(0.001) 미만
});
&lt;/code>&lt;/pre>
&lt;p>&lt;code>alphaTarget&lt;/code>은 &lt;code>alpha&lt;/code>의 도달 목표입니다. &lt;code>alpha&lt;/code>는 &lt;code>alphaTarget&lt;/code>에 도달할 때까지 감소합니다. &lt;code>alphaTarget&lt;/code>이 &lt;code>alphaMin&lt;/code>보다 크다면 &lt;code>alpha&lt;/code>가 &lt;code>alphaMin&lt;/code>에 도달할 수 없으므로 simulation은 종료되지 않고 계속 실행됩니다. 나중에 d3-drag를 적용할 때 이용할 수 있습니다.&lt;/p>
&lt;p>아래 코드에서 &lt;code>alphaTarget&lt;/code>으로 &lt;code>alpha&lt;/code>가 &lt;code>1&lt;/code>부터 &lt;code>0.5&lt;/code>까지 감소하도록 설정했습니다. 하지만 &lt;code>alpha&lt;/code>가 &lt;code>0.6&lt;/code> 미만으로 감소했을 때 simulation이 종료되므로 &lt;code>0.5&lt;/code>까지 감소할 일은 없습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">simulation.alphaMin(0.6).alphaTarget(0.5);
simulation.on('tick', () =&amp;gt; {
console.log(simulation.alpha());
// 001: 0.9886186104779053
// 002: 0.9774962930107179
// ...
// 070: 0.5997631157484438 종료: alphaMin(0.6) 미만
});
&lt;/code>&lt;/pre>
&lt;p>아래 코드에선 &lt;code>alpha&lt;/code>가 &lt;code>0.4&lt;/code> 이하로 감소해야만 종료됩니다. 하지만, &lt;code>alphaTarget&lt;/code>에 의해 &lt;code>0.4&lt;/code>보다 작아질 수 없습니다. 고로, simulation이 종료되지 않습니다.&lt;/p>
&lt;pre>&lt;code class="language-js">simulation.alphaMin(0.4).alphaTarget(0.5);
simulation.on('tick', () =&amp;gt; {
console.log(simulation.alpha());
// 001: 0.9886186104779053
// 002: 0.9774962930107179
// ...
// 300: 0.5005000000000002
// 301: 진행 중...
});
&lt;/code>&lt;/pre>
&lt;p>&lt;code>alphaDecay&lt;/code>는 &lt;code>alpha&lt;/code>의 감소량입니다. 수가 클수록 &lt;code>alpha&lt;/code>는 &lt;code>alphaMin&lt;/code>에 빠르게 도달합니다.&lt;/p>
&lt;p>&lt;code>velocityDecay&lt;/code>는 &lt;code>node.vx&lt;/code>, &lt;code>node.vy&lt;/code> 값의 감소량입니다. 구현 코드에선 &lt;code>node.x += node.vx *= velocityDecay;&lt;/code>로 작성되어 있는데, &lt;code>node.vx *= velocityDecay&lt;/code>를 먼저 연산하고 &lt;code>node.x += node.vx&lt;/code>를 연산합니다. &lt;code>0&lt;/code>으로 설정하면 simulation이 종료될 때까지 속도를 계속 유지합니다.&lt;/p>
&lt;hr>
&lt;h2 id="forceshttpsgithubcomd3d3-forceforces">&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#forces"
target="_blank" rel="noopener noreferrer nofollow"
>Forces&lt;/a
>
&lt;/h2>
&lt;p>Forces는 simulation에서 &lt;code>node&lt;/code>에 적용할 물리적 힘입니다. 척력 혹은 인력을 적용하거나, 일정 거리를 유지하게끔 합니다. 몇가지 모듈을 이용해 force를 적용할 수 있습니다. Links, many-body, centering, collision, positioning에 대해 알아봅시다.&lt;/p>
&lt;h3 id="linkshttpsgithubcomd3d3-forcelinks">&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#links"
target="_blank" rel="noopener noreferrer nofollow"
>Links&lt;/a
>
&lt;/h3>
&lt;p>Link force는 &lt;code>node&lt;/code>를 연결하고 일정 거리를 유지하는 힘입니다. 위에서 언급했듯 &lt;code>simulation.force()&lt;/code>와 &lt;code>d3.forceLink()&lt;/code>로 생성합니다. 이 과정에서 &lt;code>distance&lt;/code>와 &lt;code>strength&lt;/code>를 이용해 거리와 거리를 유지할 힘을 결정합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const forceLink = d3
.forceLink(links)
.id(({ id }) =&amp;gt; id)
.distance(100)
.strength(1);
simulation.force('link', forceLink);
&lt;/code>&lt;/pre>
&lt;p>&lt;code>strength&lt;/code>는 &lt;code>distance&lt;/code>로 설정한 일정 거리를 유지하는 힘입니다. &lt;code>0&lt;/code>부터 &lt;code>1&lt;/code> 사이를 추천합니다&lt;/p>
&lt;h3 id="many-bodyhttpsgithubcomd3d3-forcemany-body">&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#many-body"
target="_blank" rel="noopener noreferrer nofollow"
>Many-Body&lt;/a
>
&lt;/h3>
&lt;p>Many Body force는 &lt;code>nodes&lt;/code>에 척력 혹은 인력을 적용합니다. &lt;code>simulation.force()&lt;/code>와 &lt;code>d3.forceManyBody()&lt;/code>로 생성합니다. 이 또한, &lt;code>strength&lt;/code>로 적용할 힘을 결정합니다. 전달한 수가 양수라면 인력, 음수라면 척력입니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const forceManyBody = d3
.forceManyBody()
.strength(-300);
simulation.force('manyBody', forceManyBody);
&lt;/code>&lt;/pre>
&lt;p>참고로 많은 예시에서 &lt;code>force('manyBody', forceManyBody)&lt;/code>가 아닌 &lt;code>force('charge', forceCharge)&lt;/code>로 되어있지만 이름은 전혀 중요하지 않습니다. 단순히 식별자 역할을 수행하므로 다른 force와 구분만 가능하면 됩니다.&lt;/p>
&lt;h3 id="centeringhttpsgithubcomd3d3-forcecentering">&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#centering"
target="_blank" rel="noopener noreferrer nofollow"
>Centering&lt;/a
>
&lt;/h3>
&lt;p>Centering force는 &lt;code>nodes&lt;/code>의 중심이 지정한 좌표(x, y)에 위치하도록 합니다. &lt;code>simulation.force()&lt;/code>와 &lt;code>d3.forceCenter()&lt;/code>로 생성합니다. Viewport 상에서 정중앙에 위치해야 할 때 적용합니다. &lt;code>strength&lt;/code>를 이용하면 부드러운 움직임이 가능합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const forceCenter = d3
.forceCenter(width / 2, height / 2)
.strength(0.1);
simulation.force('center', forceCenter);
&lt;/code>&lt;/pre>
&lt;p>&lt;code>resize&lt;/code> 이벤트 혹은 &lt;a
class="underline-lsre"
href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver"
target="_blank" rel="noopener noreferrer nofollow"
>ResizeObserver&lt;/a
>
로 크기 변경을 감지하고 &lt;code>nodes&lt;/code>가 항상 중앙에 위치하도록 할 수 있습니다.&lt;/p>
&lt;h3 id="collisionhttpsgithubcomd3d3-forcecollision">&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#collision"
target="_blank" rel="noopener noreferrer nofollow"
>Collision&lt;/a
>
&lt;/h3>
&lt;p>Collision force는 &lt;code>nodes&lt;/code>가 서로 겹치는 것을 방지하는 힘입니다. &lt;code>simulation.force()&lt;/code>와 &lt;code>d3.forceCollide()&lt;/code>로 생성합니다. &lt;code>node&lt;/code>를 점이 아닌 원으로 취급하여 충돌 여부를 확인하고 &lt;code>radius&lt;/code>로 원의 반지름을 결정합니다. &lt;code>strength&lt;/code>로 겹칠 때 서로 밀어낼 힘을 결정합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const forceCollide = d3
.forceCollide()
.radius(5)
.strength(0.8);
simulation.force('collide', forceCollide);
&lt;/code>&lt;/pre>
&lt;h3 id="positioninghttpsgithubcomd3d3-forcepositioning">&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force#positioning"
target="_blank" rel="noopener noreferrer nofollow"
>Positioning&lt;/a
>
&lt;/h3>
&lt;p>Positioning force는 지정한 좌표(x, y)로 &lt;code>nodes&lt;/code>를 밀어내는 힘입니다. &lt;code>simulation.force()&lt;/code>와 &lt;code>d3.forceX()&lt;/code> 그리고 &lt;code>d3.forceY()&lt;/code>로 생성합니다. &lt;code>strength&lt;/code>로 밀어내는 힘을 결정합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const forceX = d3.forceX().strength(1);
const forceY = d3.forceY(height / 2);
simulation.force('x', forceX).force('y', forceY);
&lt;/code>&lt;/pre>
&lt;p>&lt;code>d3.forceRadial()&lt;/code> 함수는 원형을 기준으로 밀어내는 힘을 생성합니다. &lt;code>strength&lt;/code>로 밀어내는 힘을 결정합니다.&lt;/p>
&lt;pre>&lt;code class="language-js">const forceRadial = d3
.forceRadial(100, width / 2, height / 2)
.strength(0.5);
simulation.force('radial', forceRadial);
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>d3-force의 개념과 동작 방식을 코드와 함께 살펴보았습니다. d3-force의 simulation, tick을 조절할 수 있는 alpha 그리고 force의 종류에 대해서 알아봤습니다. 처음 볼 땐 어려워보일 수 있겠지만 알아야 할 개념이 그리 많지 않고 이해하기 쉬운 코드와 패턴으로 금방 익힐 수 있었습니다.&lt;/p>
&lt;p>아직 d3-selection를 다루지 않아 계산 결과값으로 그래프를 그려보진 않았습니다만, 다음 시간에 d3-selection을 학습하면서 SVG로 그래프를 그려보고 이후 d3-zoom과 d3-drag를 적용해보도록 하겠습니다.&lt;/p>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a
class="underline-lsre"
href="https://github.com/d3/d3-force"
target="_blank" rel="noopener noreferrer nofollow"
>d3-force&lt;/a
>
&lt;/li>
&lt;li>&lt;a
class="underline-lsre"
href="https://stackoverflow.com/q/46426072/9735184"
target="_blank" rel="noopener noreferrer nofollow"
>What is the difference between alphaTarget and alphaMin?&lt;/a
>
&lt;/li>
&lt;/ul></description></item></channel></rss>